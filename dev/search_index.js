var documenterSearchIndex = {"docs":
[{"location":"references/#References-1","page":"References","title":"References","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"(Image: YouTube) (Image: DropBox) (Image: Docs Stable) (Image: Docs Dev) (Image: Gitter) (Image: BiVector)","category":"page"},{"location":"references/#","page":"References","title":"References","text":"Michael Reed, Differential geometric algebra with Leibniz and Grassmann (2019)\nEmil Artin, Geometric Algebra (1957)\nJohn Browne, Grassmann Algebra, Volume 1: Foundations (2011)\nC. Doran, D. Hestenes, F. Sommen, and N. Van Acker, Lie groups as spin groups, J. Math Phys. (1993)\nDavid Hestenes, Universal Geometric Algebra, Pure and Applied (1988)\nDavid Hestenes, Renatus Ziegler, Projective Geometry with Clifford Algebra, Acta Appl. Math. (2019)\nDavid Hestenes, Tutorial on geometric calculus. Advances in Applied Clifford Algebra (2013)\nLachlan Gunn, Derek Abbott, James Chappell, Ashar Iqbal, Functions of multivector variables (2011)\nAaron D. Schutte, A nilpotent algebra approach to Lagrangian mechanics and constrained motion (2016)\nVladimir and Tijana Ivancevic, Undergraduate lecture notes in DeRahm-Hodge theory. arXiv (2011)\nPeter Woit, Clifford algebras and spin groups, Lecture Notes (2012)","category":"page"},{"location":"tutorials/install/#Installation-1","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"Grassmann.jl is a package for the Julia language, which can be obtained from their website or the recommended method for your operating system (GNU/Linux/Mac/Windows). Go to docs.julialang.org for documentation.","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"Availability of this package and its subpackages is automatically handled with Julia's package manager using Pkg and Pkg.add(\"Grassmann\") or by entering into ] mode:","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"pkg> add Grassmann","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"If you would like to keep up to date with the latest commits, instead use","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"pkg> add Grassmann#master","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"which is not recommended if you want to use a stable release.","category":"page"},{"location":"tutorials/install/#Requirements-1","page":"Installation","title":"Requirements","text":"","category":"section"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"When the master branch is used it is possible that some of the dependencies also require a development branch before the release. This may include (but is not limited to) the following packages:","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"This requires a merged version of ComputedFieldTypes at ComputedFieldTypes.jl.","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"Interoperability of TensorAlgebra with other packages is enabled by DirectSum.jl and AbstractTensors.jl.","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"The package is compatible via Requires.jl with  Reduce.jl, SymPy.jl, SymEngine.jl, AbstractAlgebra.jl, Nemo.jl, GaloisFields.jl, LightGraphs,jl, Compose.jl, GeometryTypes,jl, Makie.jl.","category":"page"},{"location":"tutorials/install/#Grassmann-for-enterprise-1","page":"Installation","title":"Grassmann for enterprise","text":"","category":"section"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"Sponsor this at liberapay, GitHub Sponsors, Patreon, or Bandcamp; also available as part of the Tidelift Subscription:","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"The maintainers of Grassmann and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.","category":"page"},{"location":"tutorials/mixed-tensors/#Mixed-tensor-product-1","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"","category":"section"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"Groups such as SU(n) can alternatively be represented with the dual Grassmann’s exterior product algebra, generating a 2^2n-dimensional mother algebra with geometric product from the n-dimensional vector space and its dual vector space. The product of the vector basis and covector basis elements form the n^2-dimensional bivector subspace of the full frac(2n)2(2n2)-dimensional bivector sub-algebra. The package Grassmann is working towards making the full extent of this number system available in Julia by using static compiled parametric type information to handle sparse sub-algebras, such as the (1,1)-tensor bivector algebra.","category":"page"},{"location":"tutorials/mixed-tensors/#Constructing-linear-transformations-1","page":"Mixed tensor product ⊗","title":"Constructing linear transformations","text":"","category":"section"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"Note that Λ(3) gives the vector basis, and Λ(3)' gives the covector basis:","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"using Grassmann","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"Λ(3)\nΛ(3)'","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"The following command yields a local 2D vector and covector basis,","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"mixedbasis\"2\"\nw1+2w2\nans(v1+v2)","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"The sum w1+2w2 is interpreted as a covector element of the dual vector space, which can be evaluated as a linear functional when a vector argument is input. Using these in the workspace, it is possible to use the Grassmann exterior ∧-tensor product operation to construct elements ℒ of the (1,1)-bivector subspace of linear transformations from the Grade{2} algebra.","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"ℒ = (v1+2v2)∧(3w1+4w2)","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"The element ℒ is a linear form which can take Grade{1} vectors as input,","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"ℒ(v1+v2)\nL = [1,2] * [3,4]'; L * [1,1]","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"which is a computation equivalent to a matrix computation.","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"The TensorAlgebra evalution is still a work in progress, and the API and implementation may change as more features and algebraic operations and product structure are added.","category":"page"},{"location":"tutorials/mixed-tensors/#Importing-the-Leech-lattice-generator-1","page":"Mixed tensor product ⊗","title":"Importing the Leech lattice generator","text":"","category":"section"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"In the example below, we define a constant Leech which can be used to obtain linear combinations of the Leech lattice,","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"julia> using Grassmann\n\njulia> generator = [8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       2 2 2 2 0 0 0 0 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0;\n       2 2 0 0 2 2 0 0 2 2 0 0 2 2 0 0 0 0 0 0 0 0 0 0;\n       2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 0 0 0 0 0 0 0 0;\n       2 0 0 2 2 0 0 2 2 0 0 2 2 0 0 2 0 0 0 0 0 0 0 0;\n       4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0;\n       2 0 2 0 2 0 0 2 2 2 0 0 0 0 0 0 2 2 0 0 0 0 0 0;\n       2 0 0 2 2 2 0 0 2 0 2 0 0 0 0 0 2 0 2 0 0 0 0 0;\n       2 2 0 0 2 0 2 0 2 0 0 2 0 0 0 0 2 0 0 2 0 0 0 0;\n       0 2 2 2 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0 0;\n       0 0 0 0 0 0 0 0 2 2 0 0 2 2 0 0 2 2 0 0 2 2 0 0;\n       0 0 0 0 0 0 0 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0;\n       -3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n\njulia> const E24,W24 = Λ(24), ℝ^24+(ℝ^24)';\n\njulia> const Leech = SChain{W24,Float64}(generator./sqrt(8));\n\njulia> typeof(Leech)\nSChain{⟨++++++++++++++++++++++++------------------------⟩*,2,Float64,1128}\n\njulia> ndims(vectorspace(Leech))\n48","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"The Leech generator matrix is contained in the 1128-dimensional bivector subalgebra of the space with 48 indices.","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"julia> Leech(E24.v1)\n2.82842712474619v₁ + 0.0v₂ + 0.0v₃ + 0.0v₄ + 0.0v₅ + 0.0v₆ + 0.0v₇ + 0.0v₈ + 0.0v₉ + 0.0v₀ + 0.0va + 0.0vb + 0.0vc + 0.0vd + 0.0ve + 0.0vf + 0.0vg + 0.0vh + 0.0vi + 0.0vj + 0.0vk + 0.0vl + 0.0vm + 0.0vn + 0.0w¹ + 0.0w² + 0.0w³ + 0.0w⁴ + 0.0w⁵ + 0.0w⁶ + 0.0w⁷ + 0.0w⁸ + 0.0w⁹ + 0.0w⁰ + 0.0wA + 0.0wB + 0.0wC + 0.0wD + 0.0wE + 0.0wF + 0.0wG + 0.0wH + 0.0wI + 0.0wJ + 0.0wK + 0.0wL + 0.0wM + 0.0wN\n\njulia> Leech(E24.v2)\n1.414213562373095v₁ + 1.414213562373095v₂ + 0.0v₃ + 0.0v₄ + 0.0v₅ + 0.0v₆ + 0.0v₇ + 0.0v₈ + 0.0v₉ + 0.0v₀ + 0.0va + 0.0vb + 0.0vc + 0.0vd + 0.0ve + 0.0vf + 0.0vg + 0.0vh + 0.0vi + 0.0vj + 0.0vk + 0.0vl + 0.0vm + 0.0vn + 0.0w¹ + 0.0w² + 0.0w³ + 0.0w⁴ + 0.0w⁵ + 0.0w⁶ + 0.0w⁷ + 0.0w⁸ + 0.0w⁹ + 0.0w⁰ + 0.0wA + 0.0wB + 0.0wC + 0.0wD + 0.0wE + 0.0wF + 0.0wG + 0.0wH + 0.0wI + 0.0wJ + 0.0wK + 0.0wL + 0.0wM + 0.0wN\n\njulia> Leech(E24.v3)\n1.414213562373095v₁ + 0.0v₂ + 1.414213562373095v₃ + 0.0v₄ + 0.0v₅ + 0.0v₆ + 0.0v₇ + 0.0v₈ + 0.0v₉ + 0.0v₀ + 0.0va + 0.0vb + 0.0vc + 0.0vd + 0.0ve + 0.0vf + 0.0vg + 0.0vh + 0.0vi + 0.0vj + 0.0vk + 0.0vl + 0.0vm + 0.0vn + 0.0w¹ + 0.0w² + 0.0w³ + 0.0w⁴ + 0.0w⁵ + 0.0w⁶ + 0.0w⁷ + 0.0w⁸ + 0.0w⁹ + 0.0w⁰ + 0.0wA + 0.0wB + 0.0wC + 0.0wD + 0.0wE + 0.0wF + 0.0wG + 0.0wH + 0.0wI + 0.0wJ + 0.0wK + 0.0wL + 0.0wM + 0.0wN\n\n...","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"Then a TensorAlgebra evaluation of Leech at an Integer linear combination would be","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"julia> Leech(E24.v1 + 2*E24.v2)\n5.65685424949238v₁ + 2.82842712474619v₂ + 0.0v₃ + 0.0v₄ + 0.0v₅ + 0.0v₆ + 0.0v₇ + 0.0v₈ + 0.0v₉ + 0.0v₀ + 0.0va + 0.0vb + 0.0vc + 0.0vd + 0.0ve + 0.0vf + 0.0vg + 0.0vh + 0.0vi + 0.0vj + 0.0vk + 0.0vl + 0.0vm + 0.0vn + 0.0w¹ + 0.0w² + 0.0w³ + 0.0w⁴ + 0.0w⁵ + 0.0w⁶ + 0.0w⁷ + 0.0w⁸ + 0.0w⁹ + 0.0w⁰ + 0.0wA + 0.0wB + 0.0wC + 0.0wD + 0.0wE + 0.0wF + 0.0wG + 0.0wH + 0.0wI + 0.0wJ + 0.0wK + 0.0wL + 0.0wM + 0.0wN\n\njulia> ans⋅ans\n39.99999999999999v\n\njulia> Leech(E24.v2 + E24.v5)\n2.82842712474619v₁ + 1.414213562373095v₂ + 0.0v₃ + 0.0v₄ + 0.0v₅ + 0.0v₆ + 0.0v₇ + 0.0v₈ + 0.0v₉ + 0.0v₀ + 1.414213562373095va + 0.0vb + 0.0vc + 0.0vd + 0.0ve + 0.0vf + 0.0vg + 0.0vh + 0.0vi + 0.0vj + 0.0vk + 0.0vl + 0.0vm + 0.0vn + 0.0w¹ + 0.7071067811865475w² + 1.414213562373095w³ + 1.414213562373095w⁴ + 0.0w⁵ + 0.0w⁶ + 0.0w⁷ + 0.0w⁸ + 0.0w⁹ + 0.0w⁰ + 0.0wA + 0.0wB + 0.0wC + 0.0wD + 0.0wE + 0.0wF + 0.0wG + 0.0wH + 0.0wI + 0.0wJ + 0.0wK + 0.0wL + 0.0wM + 0.0wN\n\njulia> ans⋅ans\n7.499999999999998v","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"The Grassmann package is designed to smoothly handle high-dimensional bivector algebras with headroom to spare. Although some of these calculations may have an initial delay, repeated calls are fast due to built-in caching and pre-compilation.","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"In future updates, more emphasis will be placed on increased type-stability with more robust sparse output allocation in the computational graph and minimal footprint but maximal type-stability for intermediate results and output.","category":"page"},{"location":"design/#TensorAlgebra-design,-Manifold-code-generation-1","page":"Design","title":"TensorAlgebra design, Manifold code generation","text":"","category":"section"},{"location":"design/#","page":"Design","title":"Design","text":"Mathematical foundations and definitions specific to the Grassmann.jl implementation provide an extensible platform for computing with geometric algebra at high dimensions, along with the accompanying support packages.  The design is based on the TensorAlgebra abstract type interoperability from AbstractTensors.jl with a VectorBundle parameter from DirectSum.jl. Abstract tangent vector space type operations happen at compile-time, resulting in a differential conformal geometric algebra of hyper-dual multivector forms.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The nature of the geometric algebra code generation enables one to easily extend the abstract product operations to any specific number field type (including differential operators with Leibniz.jl or symbolic coefficients with Reduce.jl), by making use of Julia's type system. Mixed tensor products with their coefficients are constructed from these operations to work with bivector elements of Lie groups.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"DirectSum.jl: Abstract tangent bundle vector space types (unions, intersections, sums, etc.)\nAbstractTensors.jl: Tensor algebra abstract type interoperability with vector bundle parameter\nGrassmann.jl: ⟨Leibniz-Grassmann-Clifford-Hestenes⟩ differential geometric algebra of multivector forms\nLeibniz.jl: Derivation operator algebras for tensor fields\nReduce.jl: Symbolic parser generator for Julia expressions using REDUCE algebra term rewriter","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Mathematics of Grassmann can be used to study unitary groups used in quantum computing by building efficient computational representations of their algebras. Applicability of the Grassmann computational package not only maps to quantum computing, but has the potential of impacting countless other engineering and scientific computing applications. It can be used to work with automatic differentiation and differential geometry, algebraic forms and invariant theory, electric circuits and wave scattering, spacetime geometry and relativity, computer graphics and photogrammetry, and much more.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Thus, computations involving fully general rotational algebras and Lie bivector groups are possible with a full trigonometric suite. Conformal geometric algebra is possible with the Minkowski plane v_inftyemptyset, based on the null-basis. In general, multivalued quantum logic is enabled by the wedgeveestar Grassmann lattice. Mixed-symmetry algebra with Leibniz.jl and Grassmann.jl, having the geometric algebraic product chain rule, yields automatic differentiation and Hodge-DeRahm co/homology  as unveiled by Grassmann. Most importantly, the Dirac-Clifford product yields generalized Hodge-Laplacian and the Betti numbers with Euler characteristic chi.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Due to the abstract generality of the product algebra code generation, it is possible to extend the Grassmann library to include additional high performance products with few extra definitions. Operations on ultra-sparse representations for very high dimensional algebras will be gaining further performance enhancements in future updates, along with hybrid optimizations for low-dimensional algebra code generation. Thanks to the design of the product algebra code generation, any additional optimizations to the type stability will automatically enhance all the different products simultaneously. Likewise, any new product formulas will be able to quickly gain from the setup of all of the existing optimizations.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The Grassmann.jl package and its accompanying support packages provide an extensible platform for high performance computing with geometric algebra at high dimensions. This enables the usage of many different types of TensorAlgebra along with various VectorBundle parameters and interoperability for a wide range of scientific and research applications.","category":"page"},{"location":"design/#Direct-sum-yields-VectorBundle-parametric-type-polymorphism-1","page":"Design","title":"Direct-sum yields VectorBundle parametric type polymorphism ⨁","text":"","category":"section"},{"location":"design/#","page":"Design","title":"Design","text":"(Image: DOI) (Image: GitHub release (latest SemVer)) (Image: GitHub commits since latest release) (Image: Build Status) (Image: Build status)","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The DirectSum.jl package is a work in progress providing the necessary tools to work with an arbitrary Manifold specified by an encoding. Due to the parametric type system for the generating VectorBundle, the Julia compiler can fully preallocate and often cache values efficiently ahead of run-time. Although intended for use with the Grassmann.jl package, DirectSum can be used independently.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Let M = T^mu V be a VectorBundle{n}<:Manifold{n} of rank n,","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"T^mu V = (nmathbb Pgnumu) qquad mathbb P subseteqlangle v_inftyv_emptysetrangle qquad g Vtimes Vrightarrowmathbb K","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The type VectorBundle{n,ℙ,g,ν,μ} uses byte-encoded data available at pre-compilation, where mathbb P specifies the basis for up and down projection, g is a bilinear form that specifies the metric of the space, and mu is an integer specifying the order of the tangent bundle (i.e. multiplicity limit of Leibniz-Taylor monomials). Lastly, nu is the number of tangent variables. The dual space functor  is an involution which toggles a dual vector space with inverted signature with property V = textHom(Vmathbb K) and having Basis generators","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"langle v_1dotsv_n-nupartial_1dotspartial_nurangle=Mleftrightarrow M = langle w_1dotsw_n-nuepsilon_1dotsepsilon_nurangle","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"where v_iw_i are a basis for the vectors and covectors, while partial_jepsilon_j are a basis for differential operators and tensor fields.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The metric signature of the Basis{V,1} elements of a vector space V can be specified with the V\"...\" constructor by using + and - to specify whether the Basis{V,1} element of the corresponding index squares to +1 or -1. For example, S\"+++\" constructs a positive definite 3-dimensional VectorBundle.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"using DirectSum","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"ℝ^3 == V\"+++\" == vectorspace(3)","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"It is also possible to specify an arbitrary DiagonalForm having numerical values for the basis with degeneracy D\"1,1,1,0\", although the Signature format has a more compact representation. Further development will result in more metric types.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Declaring an additional plane at infinity is done by specifying it in the string constructor with infty at the first index (i.e. Riemann sphere S\"∞+++\"). The hyperbolic geometry can be declared by emptyset subsequently (i.e. Minkowski spacetime S\"∅+++\"). Additionally, the null-basis based on the projective split for confromal geometric algebra would be specified with ∞∅ initially (i.e. 5D CGA S\"∞∅+++\"). These two declared basis elements are interpreted in the type system.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The index number n of the VectorBundle corresponds to the total number of generator elements. However, even though V\"∞∅+++\" is of type VectorBundle{5,3} with 5 generator elements, it can be internally recognized in the direct sum algebra as being an embedding of a 3-index VectorBundle{3,0} with additional encoding of the null-basis (origin and point at infinity) in the parameter mathbb P of the VectorBundle{n,ℙ} type.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The tangent map takes V to its tangent space and can be applied repeatedly for higher orders, such that tangent(V,μ,ν) can be used to specify mu and nu.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"V = tangent(ℝ^3)\nV'\nV+V'","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The direct sum operator oplus can be used to join spaces (alternatively +), and the dual space functor  is an involution which toggles a dual vector space with inverted signature.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"V = ℝ'⊕ℝ^3\nV'\nW = V⊕V'","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The direct sum of a VectorBundle and its dual Voplus V represents the full mother space V*.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"collect(V) # all vector basis elements\ncollect(V') # all covector basis elements\ncollect(W) # all mixed basis elements","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"In addition to the direct-sum operation, several other operations are supported, such as cupcapsubseteqsupseteq for set operations. Due to the design of the VectorBundle dispatch, these operations enable code optimizations at compile-time provided by the bit parameters.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"ℝ+ℝ' ⊇ vectorspace(1)\nℝ ∩ ℝ' == vectorspace(0)\nℝ ∪ ℝ' == ℝ+ℝ'","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Remark. Although some of the operations like cup and oplus are similar and sometimes result in the same values, the union and sum are entirely different operations in general.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"bigcup T^mu_iV_i = left(mathbb P+maxn_i-mathbb P_i_i bigcup mathbb P_i cup g_i maxmu_i_iright)","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"bigoplus T^mu_iV_i = left(mathbb P+sum (n_i-mathbb P_i) bigcup mathbb P_i oplus_i g_imaxmu_i_iright)","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Calling manifolds with sets of indices constructs the subspace representations. Given M(s::Int...) one can encode SubManifold{length(s),M,s} with induced orthogonal space Z, such that computing unions of submanifolds is done by inspecting the parameter sin Vsubseteq W and snotin Z.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"(ℝ^5)(3,5)\ndump(ans)","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Here, calling a Manifold with a set of indices produces a SubManifold representation.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"T^eV subset T^mu W iff exists ZintextVect_mathbb K(T^e(Voplus Z) = T^eleq muWVperp Z)","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Operations on Manifold types is automatically handled at compile time.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"To help provide a commonly shared and readable indexing to the user, some extended dual index print methods with full alphanumeric characters (62+2) are provided:","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"DirectSum.printindices(stdout,DirectSum.indices(UInt(2^62-1)),false,\"v\")\nDirectSum.printindices(stdout,DirectSum.indices(UInt(2^62-1)),false,\"w\")","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"An application of this is in the Grasmann package, where dual indexing is used.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"More information about DirectSum is available  at https://github.com/chakravala/DirectSum.jl","category":"page"},{"location":"design/#Interoperability-for-TensorAlgebra{V}-1","page":"Design","title":"Interoperability for TensorAlgebra{V}","text":"","category":"section"},{"location":"design/#","page":"Design","title":"Design","text":"(Image: DOI) (Image: GitHub release (latest SemVer)) (Image: GitHub commits since latest release) (Image: Build Status) (Image: Build status)","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The AbstractTensors package is intended for universal interoperability of the abstract TensorAlgebra type system. All TensorAlgebra{V} subtypes have type parameter V, used to store a VectorBundle value obtained from DirectSum.jl. By itself, this package does not impose any specifications or structure on the TensorAlgebra{V} subtypes and elements, aside from requiring V to be a VectorBundle. This means that different packages can create tensor types having a common underlying VectorBundle structure. For example, this is mainly used in Grassmann.jl to define various SubAlgebra, TensorTerm and TensorMixed types, each with subtypes. Externalizing the abstract type helps extend the dispatch to other packages.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"julia> Grassmann.TensorTerm{V,G} <: AbstractTensors.TensorAlgebra{V}\ntrue","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The key to making the whole interoperability work is that each TensorAlgebra subtype shares a VectorBundle parameter (with all isbitstype parameters), which contains all the info needed at compile time to make decisions about conversions. So other packages need only use the vector space information to decide on how to convert based on the implementation of a type. If external methods are needed, they can be loaded by Requires when making a separate package with TensorAlgebra interoperability.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Since VectorBundle choices are fundamental to TensorAlgebra operations, the universal interoperability between TensorAlgebra{V} elements with different associated VectorBundle choices is naturally realized by applying the union morphism to operations, e.g. bigwedge Lambda^p_1V_1timesdotstimesLambda^p_gV_g rightarrow Lambda^sum_kp_kbigcup_k V_k. Some of the method names like +-*otimescircledastodotboxtimesstar for TensorAlgebra elements are shared across different packages, with interoperability.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"function op(::TensorAlgebra{V},::TensorAlgebra{V}) where V\n    # well defined operations if V is shared\nend # but what if V ≠ W in the input types?\n\nfunction op(a::TensorAlgebra{V},b::TensorAlgebra{W}) where {V,W}\n    VW = V ∪ W        # VectorSpace type union\n    op(VW(a),VW(b))   # makes call well-defined\nend # this option is automatic with interop(a,b)\n\n# alternatively for evaluation of forms, VW(a)(VW(b))","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Suppose we are dealing with a new subtype in another project, such as","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"using AbstractTensors, DirectSum\nstruct SpecialTensor{V} <: TensorAlgebra{V} end\na = SpecialTensor{ℝ}()\nb = SpecialTensor{ℝ'}()\nnothing # hide","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"To define additional specialized interoperability for further methods, it is necessary to define dispatch that catches well-defined operations for equal VectorBundle choices and a fallback method for interoperability, along with a VectorBundle morphism:","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"(W::Signature)(s::SpecialTensor{V}) where V = SpecialTensor{W}() # conversions\nop(a::SpecialTensor{V},b::SpecialTensor{V}) where V = a # do some kind of operation\nop(a::TensorAlgebra{V},b::TensorAlgebra{W}) where {V,W} = interop(op,a,b) # compat\nnothing # hide","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"which should satisfy (using the cup operation as defined in DirectSum)","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"op(a,b) |> vectorspace == vectorspace(a) ∪ vectorspace(b)","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Thus, interoperability is simply a matter of defining one additional fallback method for the operation and also a new form VectorBundle compatibility morphism.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Additionally, a universal unit volume element can be specified in terms of LinearAlgebra.UniformScaling, which is independent of V and has its interpretation only instantiated by the context of the TensorAlgebra{V} element being operated on. The universal interoperability of LinearAlgebra.UniformScaling as a pseudoscalar element which takes on the VectorBundle form of any other TensorAlgebra element is handled globally. This enables the usage of I from LinearAlgebra as a universal pseudoscalar element.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"(W::Signature)(s::UniformScaling) = ones(ndims(W)) # interpret a unit pseudoscalar\nop(a::TensorAlgebra{V},b::UniformScaling) where V = op(a,V(b)) # right pseudoscalar\nop(a::UniformScaling,b::TensorAlgebra{V}) where V = op(V(a),b) # left pseudoscalar","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Utility methods such as scalar, involute, norm, norm2, unit, even, odd are also defined.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"To support a generalized interface for TensorAlgebra element evaluation, a similar compatibility interface is constructible.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"(a::SpecialTensor{V})(b::SpecialTensor{V}) where V = a # conversion of some form\n(a::SpecialTensor{W})(b::SpecialTensor{V}) where {V,W} = interform(a,b) # compat\nnothing # hide","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"which should satisfy (using the cup operation as defined in DirectSum)","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"b(a) |> vectorspace == vectorspace(a) ∪ vectorspace(b)","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The purpose of the interop and interform methods is to help unify the interoperability of TensorAlgebra elements.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"More information about DirectSum is available  at https://github.com/chakravala/AbstractTensors.jl","category":"page"},{"location":"library/#Grassmann.jl-Library-1","page":"Library","title":"Grassmann.jl Library","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Pages = [\"library.md\"]","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Modules = [DirectSum, Grassmann, AbstractTensors, Leibniz]","category":"page"},{"location":"library/#Grassmann.Basis","page":"Library","title":"Grassmann.Basis","text":"Basis{V,G,B} <: TensorTerm{V,G} <: TensorGraded{V,G} <: TensorAlgebra{V}\n\nBasis type with pseudoscalar V::Manifold, grade/rank G::Int, bits B::UInt64.\n\n\n\n\n\n","category":"type"},{"location":"library/#Grassmann.Chain","page":"Library","title":"Grassmann.Chain","text":"Chain{V,G,𝕂} <: TensorGraded{V,G} <: TensorAlgebra{V}\n\nChain type with pseudoscalar V::Manifold, grade/rank G::Int, scalar field 𝕂::Type.\n\n\n\n\n\n","category":"type"},{"location":"library/#Grassmann.MultiGrade","page":"Library","title":"Grassmann.MultiGrade","text":"MultiGrade{V,G} <: TensorMixed{V,G} <: TensorAlgebra{V}\n\nSparse multivector type with pseudoscalar V::Manifold and grade encoding G::UInt64.\n\n\n\n\n\n","category":"type"},{"location":"library/#Grassmann.MultiVector","page":"Library","title":"Grassmann.MultiVector","text":"MultiVector{V,𝕂} <: TensorMixed{V} <: TensorAlgebra{V}\n\nChain type with pseudoscalar V::Manifold and scalar field 𝕂::Type.\n\n\n\n\n\n","category":"type"},{"location":"library/#Grassmann.Simplex","page":"Library","title":"Grassmann.Simplex","text":"Simplex{V,G,B,𝕂} <: TensorTerm{V,G} <: TensorGraded{V,G} <: TensorAlgebra{V}\n\nSimplex type with pseudoscalar V::Manifold, grade/rank G::Int, basis B::Basis{V,G}, and the scalar field 𝕂::Type.\n\n\n\n\n\n","category":"type"},{"location":"library/#Grassmann.SparseChain","page":"Library","title":"Grassmann.SparseChain","text":"SparseChain{V,G} <: TensorGraded{V,G} <: TensorAlgebra{V}\n\nSparse chain type with pseudoscalar V::Manifold and grade/rank G::Int.\n\n\n\n\n\n","category":"type"},{"location":"library/#AbstractLattices.:∧-Union{Tuple{Y}, Tuple{X}, Tuple{X,Y}} where Y<:TensorAlgebra where X<:TensorAlgebra","page":"Library","title":"AbstractLattices.:∧","text":"∧(ω::TensorAlgebra,η::TensorAlgebra)\n\nExterior product as defined by the anti-symmetric quotient Λ≡⊗/~\n\n\n\n\n\n","category":"method"},{"location":"library/#AbstractLattices.:∨-Union{Tuple{Y}, Tuple{X}, Tuple{X,Y}} where Y<:TensorAlgebra where X<:TensorAlgebra","page":"Library","title":"AbstractLattices.:∨","text":"∨(ω::TensorAlgebra,η::TensorAlgebra)\n\nRegressive product as defined by the DeMorgan's law: ∨(ω...) = ⋆⁻¹(∧(⋆.(ω)...))\n\n\n\n\n\n","category":"method"},{"location":"library/#AbstractTensors.:∗-Union{Tuple{B}, Tuple{A}, Tuple{V}, Tuple{A,B}} where B<:TensorAlgebra{V} where A<:TensorAlgebra{V} where V","page":"Library","title":"AbstractTensors.:∗","text":"∗(ω::TensorAlgebra,η::TensorAlgebra)\n\nReversed geometric product: ω∗η = (~ω)*η\n\n\n\n\n\n","category":"method"},{"location":"library/#AbstractTensors.:⊙-Tuple{Vararg{TensorAlgebra,N} where N}","page":"Library","title":"AbstractTensors.:⊙","text":"⊙(ω::TensorAlgebra,η::TensorAlgebra)\n\nSymmetrization projection: ⊙(ω...) = ∑(∏(σ.(ω)...))/factorial(length(ω))\n\n\n\n\n\n","category":"method"},{"location":"library/#AbstractTensors.:⊠-Tuple{Vararg{TensorAlgebra,N} where N}","page":"Library","title":"AbstractTensors.:⊠","text":"⊠(ω::TensorAlgebra,η::TensorAlgebra)\n\nAnti-symmetrization projection: ⊠(ω...) = ∑(∏(πσ.(ω)...))/factorial(length(ω))\n\n\n\n\n\n","category":"method"},{"location":"library/#AbstractTensors.involute","page":"Library","title":"AbstractTensors.involute","text":"involute(ω::TensorAlgebra)\n\nInvolute of a MultiVector element: ~ω = (-1)^grade(ω)*ω\n\n\n\n\n\n","category":"function"},{"location":"library/#AbstractTensors.scalar-Tuple{Basis{V,0,B} where B where V}","page":"Library","title":"AbstractTensors.scalar","text":"scalar(::TensorAlgebra)\n\nReturn the scalar (grade 0) part of any multivector.\n\n\n\n\n\n","category":"method"},{"location":"library/#Grassmann.:⊘-Union{Tuple{V}, Tuple{TensorAlgebra{V},TensorAlgebra{V}}} where V","page":"Library","title":"Grassmann.:⊘","text":"⊘(ω::TensorAlgebra,η::TensorAlgebra)\n\nSandwich product: ω⊘η = (~ω)⊖η⊖ω\n\n\n\n\n\n","category":"method"},{"location":"library/#Grassmann.basis","page":"Library","title":"Grassmann.basis","text":"basis(V::Manifold,:V,\"v\",\"w\",\"∂\",\"ϵ\")\n\nGenerates Basis declaration of the Algebra{V} having Manifold specified by V. The first argument provides pseudoscalar specifications, the second argument is the variable name for the Manifold, and the third and fourth argument are variable prefixes of the Basis vector names (and covector basis names).\n\n\n\n\n\n","category":"function"},{"location":"library/#Grassmann.betti-Union{Tuple{T}, Tuple{T}, Tuple{V}} where T<:TensorAlgebra{V} where V","page":"Library","title":"Grassmann.betti","text":"betti(::TensorAlgebra)\n\nCompute the Betti numbers.\n\n\n\n\n\n","category":"method"},{"location":"library/#Grassmann.complementleft","page":"Library","title":"Grassmann.complementleft","text":"complementleft(::TensorAlgebra)\n\nNon-metric variant Grassmann-Poincare left complement.\n\n\n\n\n\n","category":"function"},{"location":"library/#Grassmann.complementlefthodge","page":"Library","title":"Grassmann.complementlefthodge","text":"complementlefthodge(ω::TensorAlgebra)\n\nGrassmann-Poincare left complement: ⋆'ω = I∗'ω\n\n\n\n\n\n","category":"function"},{"location":"library/#Grassmann.complementright","page":"Library","title":"Grassmann.complementright","text":"complementright(::TensorAlgebra)\n\nNon-metric variant of Grassmann-Poincare-Hodge complement.\n\n\n\n\n\n","category":"function"},{"location":"library/#Grassmann.complementrighthodge","page":"Library","title":"Grassmann.complementrighthodge","text":"complementrighthodge(ω::TensorAlgebra)\n\nGrassmann-Poincare-Hodge complement: ⋆ω = ω∗I\n\n\n\n\n\n","category":"function"},{"location":"library/#Grassmann.getbasis-Union{Tuple{N}, Tuple{Manifold{N},Any}} where N","page":"Library","title":"Grassmann.getbasis","text":"getbasis(V::Manifold,v)\n\nFetch a specific Basis element from an optimal Grassmann.SubAlgebra{V} selection.\n\n\n\n\n\n","category":"method"},{"location":"library/#Grassmann.vector-Tuple{Basis{V,0,B} where B where V}","page":"Library","title":"Grassmann.vector","text":"vector(::TensorAlgebra)\n\nReturn the vector (grade 1) part of any multivector.\n\n\n\n\n\n","category":"method"},{"location":"library/#Grassmann.χ-Union{Tuple{T}, Tuple{T}, Tuple{V}} where T<:TensorAlgebra{V} where V","page":"Library","title":"Grassmann.χ","text":"χ(::TensorAlgebra)\n\nCompute the Euler characteristic χ = ∑ₚ(-1)ᵖbₚ.\n\n\n\n\n\n","category":"method"},{"location":"library/#Grassmann.@basis","page":"Library","title":"Grassmann.@basis","text":"@basis\n\nGenerates Basis elements of the Algebra{V} having Manifold specified by V. As a result of this macro, all of the Basis{V,G} elements generated by that VectorBundle become available in the local workspace with the specified naming. The first argument provides pseudoscalar specifications, the second argument is the variable name for the Manifold, and the third and fourth argument are variable prefixes of the Basis vector names (and covector basis names). Default for @basis M is @basis M V v w ∂ ϵ.\n\n\n\n\n\n","category":"macro"},{"location":"library/#Grassmann.@dualbasis","page":"Library","title":"Grassmann.@dualbasis","text":"@dualbasis\n\nGenerates Basis elements of the Algebra{V'} having Manifold specified by V'. As a result of this macro, all of the Basis{V',G} elements generated by that VectorBundle become available in the local workspace with the specified naming. The first argument provides pseudoscalar specifications, the second argument is the variable name for the dual Manifold, and the third and fourth argument are variable prefixes of the Basis covector names (and tensor field basis names). Default for @dualbasis M is @dualbasis M VV w ϵ.\n\n\n\n\n\n","category":"macro"},{"location":"library/#Grassmann.@mixedbasis","page":"Library","title":"Grassmann.@mixedbasis","text":"@mixedbasis\n\nGenerates Basis elements of the Algebra{V⊕V'} having Manifold specified by V⊕V'. As a result of this macro, all of the Basis{V⊕V',G} elements generated by that VectorBundle become available in the local workspace with the specified naming. The first argument provides pseudoscalar specifications, the second argument is the variable name for the Manifold, and the third and fourth argument are variable prefixes of the Basis vector names (and covector basis names). Default for @mixedbasis M is @mixedbasis M V v w ∂ ϵ.\n\n\n\n\n\n","category":"macro"},{"location":"library/#Grassmann.Algebra","page":"Library","title":"Grassmann.Algebra","text":"Grassmann.Algebra{V} <: SubAlgebra{V} <: TensorAlgebra{V}\n\nGrassmann algebra container with cache of Basis{V} elements and their Symbol names.\n\n\n\n\n\n","category":"type"},{"location":"library/#Grassmann.ExtendedAlgebra","page":"Library","title":"Grassmann.ExtendedAlgebra","text":"Grassmann.ExtendedAlgebra{V} <: SubAlgebra{V} <: TensorAlgebra{V}\n\nGrassmann algebra container without a dedicated Basis cache (only lazy caching).\n\n\n\n\n\n","category":"type"},{"location":"library/#Grassmann.SparseAlgebra","page":"Library","title":"Grassmann.SparseAlgebra","text":"Grassmann.SparseAlgebra{V} <: SubAlgebra{V} <: TensorAlgebra{V}\n\nGrassmann algebra with sparse cache of Basis{V} elements and their Symbol names.\n\n\n\n\n\n","category":"type"},{"location":"library/#AbstractTensors.contraction-Union{Tuple{V}, Tuple{Basis{V,G,B} where B where G,Basis{V,G,B} where B where G}} where V","page":"Library","title":"AbstractTensors.contraction","text":"contraction(ω::TensorAlgebra,η::TensorAlgebra)\n\nInterior (right) contraction product: ω⋅η = ω∨⋆η\n\n\n\n\n\n","category":"method"},{"location":"library/#Base.:&-Union{Tuple{V}, Tuple{TensorAlgebra{V},TensorAlgebra{V}}} where V","page":"Library","title":"Base.:&","text":"∨(ω::TensorAlgebra,η::TensorAlgebra)\n\nRegressive product as defined by the DeMorgan's law: ∨(ω...) = ⋆⁻¹(∧(⋆.(ω)...))\n\n\n\n\n\n","category":"method"},{"location":"library/#Base.:*-Union{Tuple{V}, Tuple{Basis{V,G,B} where B where G,Basis{V,G,B} where B where G}} where V","page":"Library","title":"Base.:*","text":"*(ω::TensorAlgebra,η::TensorAlgebra)\n\nGeometric algebraic product: ω⊖η = (-1)ᵖdet(ω∩η)⊗(Λ(ω⊖η)∪L(ω⊕η))\n\n\n\n\n\n","category":"method"},{"location":"library/#Base.:<<-Union{Tuple{V}, Tuple{TensorAlgebra{V},TensorAlgebra{V}}} where V","page":"Library","title":"Base.:<<","text":"⊙(ω::TensorAlgebra,η::TensorAlgebra)\n\nSymmetrization projection: ⊙(ω...) = ∑(∏(σ.(ω)...))/factorial(length(ω))\n\n\n\n\n\n","category":"method"},{"location":"library/#Base.:>>-Union{Tuple{V}, Tuple{TensorAlgebra{V},TensorAlgebra{V}}} where V","page":"Library","title":"Base.:>>","text":"⊠(ω::TensorAlgebra,η::TensorAlgebra)\n\nAnti-symmetrization projection: ⊠(ω...) = ∑(∏(πσ.(ω)...))/factorial(length(ω))\n\n\n\n\n\n","category":"method"},{"location":"library/#Base.:>>>-Union{Tuple{V}, Tuple{TensorAlgebra{V},TensorAlgebra{V}}} where V","page":"Library","title":"Base.:>>>","text":"⊘(ω::TensorAlgebra,η::TensorAlgebra)\n\nSandwich product: ω>>>η = ω⊖η⊖(~ω)\n\n\n\n\n\n","category":"method"},{"location":"library/#Base.:~-Tuple{TensorAlgebra}","page":"Library","title":"Base.:~","text":"reverse(ω::TensorAlgebra)\n\nReverse of a MultiVector element: ~ω = (-1)^(grade(ω)(grade(ω)-1)/2)ω\n\n\n\n\n\n","category":"method"},{"location":"library/#Base.conj","page":"Library","title":"Base.conj","text":"conj(ω::TensorAlgebra)\n\nClifford conjugate of a MultiVector element: conj(ω) = involute(~ω)\n\n\n\n\n\n","category":"function"},{"location":"library/#Base.imag-Union{Tuple{T}, Tuple{T}, Tuple{G}, Tuple{V}} where T<:TensorGraded{V,G} where G where V","page":"Library","title":"Base.imag","text":"imag(ω::TensorAlgebra)\n\nThe imag part (ω-(~ω))/2 is defined by abs2(imag(ω)) == -(imag(ω)^2).\n\n\n\n\n\n","category":"method"},{"location":"library/#Base.real-Union{Tuple{T}, Tuple{T}, Tuple{G}, Tuple{V}} where T<:TensorGraded{V,G} where G where V","page":"Library","title":"Base.real","text":"real(ω::TensorAlgebra)\n\nThe real part (ω+(~ω))/2 is defined by abs2(real(ω)) == real(ω)^2.\n\n\n\n\n\n","category":"method"},{"location":"library/#Base.reverse-Tuple{UniformScaling{Bool}}","page":"Library","title":"Base.reverse","text":"~(ω::TensorAlgebra)\n\nReverse of a MultiVector element: ~ω = (-1)^(grade(ω)(grade(ω)-1)/2)ω\n\n\n\n\n\n","category":"method"},{"location":"library/#LinearAlgebra.cross-Union{Tuple{Vararg{T,N} where N}, Tuple{T}} where T<:TensorAlgebra","page":"Library","title":"LinearAlgebra.cross","text":"cross(ω::TensorAlgebra,η::TensorAlgebra)\n\nCross product: ω×η = ⋆(ω∧η)\n\n\n\n\n\n","category":"method"},{"location":"library/#LinearAlgebra.dot-Union{Tuple{B}, Tuple{A}, Tuple{V}, Tuple{A,B}} where B<:TensorAlgebra{V} where A<:TensorAlgebra{V} where V","page":"Library","title":"LinearAlgebra.dot","text":"dot(ω::TensorAlgebra,η::TensorAlgebra)\n\nInterior (right) contraction product: ω⋅η = ω∨⋆η\n\n\n\n\n\n","category":"method"},{"location":"library/#AbstractTensors.TensorAlgebra","page":"Library","title":"AbstractTensors.TensorAlgebra","text":"TensorAlgebra{V} <: Number\n\nUniversal root tensor type with DirectSum.Manifold instance parameter.\n\n\n\n\n\n","category":"type"},{"location":"tutorials/algebra-of-space/#The-Algebra-of-Space-(G3)-1","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"","category":"section"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"This notebook is an adaptation from the clifford python documentation.","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Import Grassmann and instantiate a three dimensional geometric algebra","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"using Grassmann\nbasis\"3\"","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Given a three dimensional GA with the orthonormal basis v_icdot v_j = delta_ij, the basis consists of scalars, three vectors, three bivectors, and a trivector.","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"underbracev_textscalarqquadunderbracev_1v_2v_3_textvectorsqquadunderbracev_12v_23v_13_textbivectorsqquadunderbracev_123_texttrivector","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"The @basis macro declares the algebra and assigns the Basis elements to local variables. The Grassmann.Algebra can also be assigned to G3 as","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"G3 = Λ(3)","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"You may wish to explicitly assign the blades to variables like so,","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"e1 = G3.v1\ne2 = G3.v2\n# etc ...","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Or, if you're lazy you can use the macro with different local names","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"@basis ℝ^3 E e\ne3, e123","category":"page"},{"location":"tutorials/algebra-of-space/#Basics-1","page":"The Algebra of Space (G3)","title":"Basics","text":"","category":"section"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"The basic products are available","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"v1 * v2 # geometric product\nv1 | v2 # inner product\nv1 ∧ v2 # exterior product\nv1 ∧ v2 ∧ v3 # even more exterior products","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Multivectors can be defined in terms of the basis blades. For example, you can construct a rotor as a sum of a scalar and a bivector, like so","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"θ = π/4\nR = cos(θ) + sin(θ)*v23\nR = exp(θ*v23)","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"You can also mix grades without any reason","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"A = 1 + 2v1 + 3v12 + 4v123","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"The reversion operator is accomplished with the tilde ~ in front of the MultiVector on which it acts","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"~A","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Taking a projection into a specific grade of a MultiVector is usually written langle Arangle_n and can be done using the soft brackets, like so","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"A(0)\nA(1)\nA(2)","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Using the reversion and grade projection operators, we can define the magnitude of A as A^2 = langletilde A Arangle","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"~A*A\nscalar(ans)","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"This is done in the abs and abs2 operators","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"abs2(A)\nscalar(ans)","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"The dual of a multivector A can be defined as tilde AI, where I is the pseudoscalar for the geometric algebra. In G3, the dual of a vector is a bivector:","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"a = 1v1 + 2v2 + 3v3\n⋆a","category":"page"},{"location":"tutorials/algebra-of-space/#Reflections-1","page":"The Algebra of Space (G3)","title":"Reflections","text":"","category":"section"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Reflecting a vector c about a normalized vector n is pretty simple, cmapsto -ncn","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"c = v1+v2+v3 # a vector\nn = v1 # the reflector\n-n*c*n # reflect a in hyperplane normal to n","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Because we have the inv available, we can equally well reflect in un-normalized vectors using amapsto n^-1an","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"a = v1+v2+v3 # the vector\nn = 3v1 # the reflector\ninv(n)*a*n\nn\\a*n","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Reflections can also be made with respect to the hyperplane normal to the vector, in which case the formula is negated.","category":"page"},{"location":"tutorials/algebra-of-space/#Rotations-1","page":"The Algebra of Space (G3)","title":"Rotations","text":"","category":"section"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"A vector can be rotated using the formula amapsto tilde R aR, where R is a rotor. A rotor can be defined by multiple reflections, R = mn or by a plane and an angle R = e^theta B2. For example,","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"R = exp(π/4*v12)\n~R*v1*R","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Maybe we want to define a function which can return rotor of some angle theta in the v_12-plane, R_12 = e^theta v_122","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"R12(θ) = exp(θ/2*v12)\nnothing # hide","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"And use it like this","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"R = R12(π/2)\na = v1+v2+v3\n~R*a*R","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"You might as well make the angle argument a bivector, so that you can control the plane of rotation as well as the angle","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"R_B(B) = exp(B/2)\nnothing # hide","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Then you could do","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Rxy = R_B(π/4*v12)\nRyz = R_B(π/5*v23)","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"or","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"R_B(π/6*(v23+v12))","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Maybe you want to define a function which returns a function that enacts a specified rotation, f(B) = amapsto e^B2ae^B2. This just saves you having to write out the sandwich product, which is nice if you are cascading a bunch of rotors, like so","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"R_factory(B) = (R = exp(B/2); a -> ~R*a*R)\nRxy = R_factory(π/3*v12)\nRyz = R_factory(π/3*v23)\nRxz = R_factory(π/3*v13)\nnothing # hide","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Then you can do things like","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"R = R_factory(π/6*(v23+v12)) # this returns a function\nR(a) # which acts on a vector\nRxy(Ryz(Rxz(a)))","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"To make cascading a sequence of rotations as concise as possible, we could define a function which takes a list of bivectors ABC, and enacts the sequence of rotations which they represent on some vector x.","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"R_seq(args...) = (R = prod(exp.(args./2)); a -> ~R*a*R)\nR = R_seq(π/2*v23, π/2*v12, v1)\nR(v1)","category":"page"},{"location":"#Grassmann.jl-1","page":"Home","title":"Grassmann.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"⟨Leibniz-Grassmann-Clifford-Hestenes⟩ differential geometric algebra / multivector simplicial complex","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: YouTube) (Image: DropBox) (Image: DOI) (Image: Gitter) (Image: BiVector)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The Grassmann.jl package provides tools for doing computations based on multi-linear algebra, differential geometry, and spin groups using the extended tensor algebra known as Leibniz-Grassmann-Clifford-Hestenes geometric algebra. Combinatorial products include wedge vee cdot * star  sim d partial (which are the exterior, regressive, inner, and geometric products; along with the Hodge star, adjoint, reversal, differential and boundary operators). Kernelized operations are built up from composite sparse tensor products and Hodge duality, with high dimensional support for up to 62 indices using staged caching and precompilation. Code generation enables concise yet highly extensible definitions. DirectSum.jl multivector parametric type polymorphism is based on tangent bundle vector spaces and conformal projective geometry to make the dispatch highly extensible for many applications. Additionally, universal interoperability between different sub-algebras is enabled by AbstractTensors.jl, on which the type system is built.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"design.md\",\"algebra.md\",\"library.md\",\"references.md\"]","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This Grassmann package for the Julia language was created by github.com/chakravala for mathematics and computer algebra research with differential geometric algebras. These projects and repositories were started entirely independently and are available as free software to help spread the ideas to a wider audience. Please consider donating to show your thanks and appreciation to this project at liberapay, GitHub Sponsors, Patreon, Tidelift, Bandcamp or contribute (documentation, tests, examples) in the repositories.","category":"page"},{"location":"algebra/#Grassmann-elements-and-geometric-algebra-Λ(V)-1","page":"Algebra","title":"Grassmann elements and geometric algebra Λ(V)","text":"","category":"section"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"The Grassmann Basis elements v_kinLambda^1V and w^kinLambda^1V are linearly independent vector and covector elements of V, while the Leibniz Operator elements partial_kin L^1V are partial tangent derivations and epsilon_kin L^1V are dependent functions of the tangent manifold. Let VintextVect_mathbb k be a VectorBundle with dual space V and the basis elements w_kVrightarrowmathbb K, then for all xin Vcinmathbb K it holds: (w^i+w^j)(x) = w^i(x)+w^j(x) and (cw^k)(x) = cw^k(x) hold. An element of a mixed-symmetry TensorAlgebra{V} is a multilinear mapping that is formally constructed by taking the tensor products of linear and multilinear maps, (bigotimes_k omega_k)(v_1dotsv_sum_k p_k) = prod_k omega_k(v_1dotsv_p_k). Higher grade elements correspond to SubManifold subspaces, while higher order function elements become homogenous polynomials and Taylor series.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"using Grassmann","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"G3 = Λ(ℝ^3), Λ == Grassmann.Algebra\n\nΛ(tangent(ℝ^2))\n\nΛ(tangent(Grassmann.V0',3,3))","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Combining the linear basis generating elements with each other using the multilinear tensor product yields a graded (decomposable) tensor Basis langle v_i_1otimescdotsotimes v_i_krangle_k  V^krightarrowmathbb K, where rank is determined by the sum of basis index multiplicities in the tensor product decomposition. The Grassmann anti-symmetric exterior basis is denoted by v_i_1dots i_ginLambda^gV having the dual elements w^i_1cdots i_ginLambda^gV, while the Leibniz symmetric basis will be denoted by partial_i_1^mu_1dotspartial_i_g^mu_gin L^gV with corresponding epsilon_i_1^mu_1dotsepsilon_i_g^mu_gin L^gV adjoint elements. Combined, this space produces the full Leibniz tangent algebra T^mu V=Voplus (bigoplus_g=1^mu L^g V) and the Grassmann exterior algebra Lambda V = bigoplus_g=1^nLambda^g V with 2^n elements. The mixed index algebra Lambda(T^mu V) = (bigoplus_g=1^nLambda^g V)oplus(bigoplus_g=1^mu L^g V) is partitioned into both symmetric and anti-symmetric tensor equivalence classes. Any mixed tensor Basis pair omegaeta satisfies either","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"underbraceomegaotimeseta = -etaotimesomega_textanti-symmetric qquad textor qquad  underbraceomegaotimeseta = etaotimesomega_textsymmetric","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"For the oriented sets of the Grassmann exterior algebra, the parity of (-1)^Pi is factored into transposition compositions when interchanging ordering of the tensor product argument permutations. The symmetrical algebra does not need to track this parity, but has higher multiplicities in its indices. Symmetric differential function algebra of Leibniz trivializes the orientation into a single class of index multi-sets, while Grassmann's exterior algebra is partitioned into two oriented equivalence classes by anti-symmetry. Full tensor algebra can be sub-partitioned into equivalence classes in multiple ways based on the element symmetry, grade, and metric signature composite properties. Both symmetry classes can be characterized by the same geometric product.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"indices(Λ(3).v12)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"A higher-order composite tensor element is an oriented-multi-set X such that v_X = bigotimes_k v_i_k^otimesmu_k with the indices X = left((i_1mu_1)dots(i_gmu_g)right) and X=sum_kmu_k is tensor rank. Anti-symmetric indices Lambda XsubseteqLambda V have two orientations and higher multiplicities of them result in zero values, so the only interesting multiplicity is mu_kequiv1. The Leibniz-Taylor algebra is a quotient polynomial ring LVcong Rx_1dotsx_nprod_k=1^mu+1 x_p_k so that partial_k^mu+1 is zero. Typically the k in a product left(partial_p_1otimescdotsotimespartial_p_kright)^(k) is referred to as the order of the element if it is fully symmetric, which is overall tracked separately from the grade such that partial_klangle v_jrangle_r = langlepartial_kv_jrangle_r and (partial_k)^(r)omega_j = (partial_kv_j)^(r). There is a partitioning into even grade components omega_+ and odd grade components omega_- such that omega_++omega_-=omega.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Grassmann's exterior algebra doesn't invoke the properties of multi-sets, as it is related to the algebra of oriented sets; while the Leibniz symmetric algebra is that of unoriented multi-sets. Combined, the mixed-symmetry algebra yield a multi-linear propositional lattice. The formal sum of equal grade elements is an oriented Chain and with mixed grade it is a MultiVector simplicial complex. Thus, various standard operations on the oriented multi-sets are possible including cupcapoplus and the index operation ominus, which is symmetric difference operation.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"By virtue of Julia's multiple dispatch on the field type mathbb K, methods can specialize on the dimension n and grade G with a VectorBundle{n} via the TensorAlgebra{V} subtypes, such as Basis{V,G}, Simplex{V,G,B,𝕂}, Chain{V,G,𝕂}, SparseChain{V,G,𝕂}, MultiVector{V,𝕂}, and MultiGrade{V,G} types.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"The elements of the Algebra can be generated in many ways using the Basis elements created by the @basis macro,","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"using Grassmann; @basis ℝ'⊕ℝ^3 # equivalent to basis\"-+++\"","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"As a result of this macro, all of the Basis{V,G} elements generated by that VectorBundle become available in the local workspace with the specified naming. The first argument provides signature specifications, the second argument is the variable name for the VectorBundle, and the third and fourth argument are prefixes of the Basis vector names (and covector basis names). By default, V is assigned the VectorBundle and v is the prefix for the Basis elements.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"V # Minkowski spacetime\ntypeof(V) # dispatch by vector space\ntypeof(v13) # extensive type info\n2v1 + v3 # vector Chain{V,1} element\n5 + v2 + v234 # MultiVector{V} element","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"It is entirely possible to assign multiple different bases with different signatures without any problems. In the following command, the @basis macro arguments are used to assign the vector space name to S instead of V and basis elements to b instead of v, so that their local names do not interfere:","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"@basis \"++++\" S b;\nlet k = (b1 + b2) - b3\n   for j ∈ 1:9\n\t   k = k * (b234 + b134)\n\t   println(k)\nend end","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Alternatively, if you do not wish to assign these variables to your local workspace, the versatile constructors of Grassmann.Algebra{V} can be used to contain them, which is exported to the user as the method Λ(V),","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"G3 = Λ(3) # equivalent to Λ(V\"+++\"), Λ(ℝ^3), Λ.V3\nG3.v13 ⊖ G3.v12","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"The multiplication product used: * or ominus is the geometric algebraic product.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Definition. The geometric algebraic product is the oriented symmetric difference operator ominus (weighted by the bilinear form g) and multi-set sum oplus applied to multilinear tensor products otimes in a single operation.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"omega_Xominus eta_Y = underbraceoverbrace(-1)^Pi(XY)^textorient parityoverbracedetleftg_Lambda(Xcap Y)right^textintersect metric (overbracebigotimes_kin Lambda(Xominus Y) v^i_k^(Xcup Y)backslash(Xcap Y)_Lambda^1-anti-symmetric Lambda^g-mixed-symmetry)otimes (underbraceoverbracebigotimes_kin L(Xoplus Y) partial_i_k^otimesmu_k^textmulti-set sum_L^g-symmetric)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Remark: The product symbol ominus will be used to denote explicitly usage of the geometric algebraic product, although the standard number product * notation could also be used. The ominus choice helps emphasize that the geometric algebraic product is characterized by symmetric differencing of anti-symmetric indices.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(1 + 2v34) ⊖ (3 + 4v34), (1 + 2v34) * (3 + 4v34), (1 + 2im) * (3 + 4im)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Symmetry properties of the tensor algebra can be characterized in terms of the geometric product by two averaging operations, which are the symmetrization odot and anti-symmetrization boxtimes operators. These products satisfy various MultiVector properties, including the associative and distributive laws.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Definition (Exterior product): Let w_kinLambda^p_kV, then for all sigmain S_sum p_k define an equivalence relation sim such that","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"bigwedge_k omega_k(v_1dotsv_p_k) sim (-1)^Pi(sigma)(bigotimes_k omega_k)(v_sigma(1)dotsv_sigma(sum p_k))","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"if and only if ominus_komega_k = boxtimes_komega_k holds. It has become typical to use the wedge product symbol to denote products of such elements as bigwedgeLambda V equiv bigotimesLambda Vsim modulo anti-symmetrization.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"v3 ∧ v4, v4 ∧ v3, v3 ∧ v3","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Remark. Observe that the anti-symmetric property implies that omegaotimesomega=0, while the symmetric property neither implies nor denies such a property. Grassmann remarked in 1862 that the symmetric algebra of functions is by far more complicated than his anti-symmetric exterior algebra. The first part of the book focused on anti-symmetric exterior algebra, while the more complex symmetric function algebra of Leibniz was subject of the second multivariable part of the book. Elements omega_k in the space Lambda V of anti-symmetric algebra are often studied as unit quantum state vectors in a unitary probability space, where sum_komega_kneqbigotimes_komega_k is entanglement.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Definition (Reverse, involute, conjugate). The reverse of langleomegarangle_r is defined as langletildeomegarangle_r = (-1)^(r-1)r2langleomegarangle_r, while the involute is langleomegarangle_r^times=(-1)^rlangleomegarangle_r and Clifford conj  langleomegarangle_r^ddagger is the composition of involute and reverse.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"conj(v234) == involute(~v234)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Definition (Reversed product). Define the index reversed product ast which yields a Hilbert space structure:","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"omegaasteta = tildeomegaominuseta quad omegaasteta = omegaominustildeeta qquad omega^2 = omegaastomega quad omega = sqrtomegaastomega quad omega = textEuclidean omega","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Remark. Observe that ast and ast could both be exchanged in abs, abs2, and norm; however, these are different products. The scalar product circledast is the scalar part, so etacircledastomega = langleetaastomegarangle.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"2v34 ⊖ 2v34, 2v34 * 2v34, 2v34 ∗ 2v34, 2v34 ⊛ 2v34 # (gp, gp, rp, sp)\nabs2(2v34), abs(2v34), norm(2v34) # application of reverse product","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Definition (Inverse). omega^-1 = omegaast(omegaastomega)^-1 = tildeomegaomega^2, with etaomega = etaominusomega^-1 and etabackslashomega = eta^-1ominusomega.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"1/v34, inv(v34) == ~v34/abs2(v34)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Definition (Sandwich product). This product can be defined as etaoslashomega = omegabackslashetaominusomega^times. Alternatively, the reversed definition is eta^timesominusomegaeta or in Julia η>>>ω, which is often found in literature.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(2v3+5v4) ⊘ v3 == inv(v3)*(2v3+5v4)*involute(v3)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Remark. Observe that it is overall more simple and consistent to use astoslash operations instead of the reversed.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"The real part Reomega = (omega+tildeomega)2 is defined by Reomega^2 = (Reomega)^ominus2 and the imag part Imomega = (omega-tildeomega)2 by Imomega^2 = -(Imomega)^ominus2, such that omega = Reomega+Imomega has real and imaginary partitioned by","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"langletildeomegarangle_rleftlangleomegarangle_rright = sqrtlangletildeomegarangle_r^2biglangleomegarangle_rbig^2 = sqrtlangleomegarangle_rastlangleomegarangle_r^-1 = sqrtlangletildeomegarangle_rlangleomegarangle_r=sqrt(-1)^(r-1)r2 in1sqrt-1","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"which is a unique partitioning completely independent of the metric space and manifold of the algebra.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"omegaastomega = omega^2 = Reomega+Imomega^2 = Reomega^2+Imomega^2 + 2Re(ReomegaastImomega)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"The radial and angular components in a multivector exponential are partitioned by the parity of their metric.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"It is possible to assign the quaternion generators ijk with","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"i,j,k = hyperplanes(ℝ^3)\ni^2, j^2, k^2, i*j*k\n-(j+k) * (j+k)\n-(j+k) * i","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Alternatively, another representation of the quaternions is","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"basis\"--\"\nv1^2, v2^2, v12^2, v1*v2*v12","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"The parametric type formalism in Grassmann is highly expressive to enable the pre-allocation of geometric algebra computations for specific sparse-subalgebras, including the representation of rotational groups, Lie bivector algebras, and affine projective geometry. All of this is enabled by the psuedoscalar complement duality.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Definition (Poincare-Hodge dual complement): Let starlangleomegarangle_p = langleomegarangle_past I = langletildeomegarangle_pominus I, then star  Lambda^pVrightarrowLambda^n-pV.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Remark. While staromega is complementrighthodge of omega, the complementlefthodge would be Iastomega. The star symbol was added to the Julia language as unary operator for ease of use with Grassmann on Julia's v1.2 release.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"With LightGraphs,jl, GraphPlot.jl, Cairo.jl, Compose.jl it is possible to convert Grassmann numbers into graphs.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"using Grassmann, Compose # environment: LightGraphs, GraphPlot\nx = Grassmann.Algebra(ℝ^7).v123\nGrassmann.graph(x+!x)\ndraw(PDF(\"simplex.pdf\",16cm,16cm),x+!x)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(Image: paper/img/triangle-tetrahedron.png)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Figure. Triangle with its tetrahedron complement v_123 + star v_123 in mathbb R^7.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"John Browne has discussed Grassmann duality principle in book, stating that every theorem (involving either of the exterior and regressive products) can be translated into its dual theorem by replacing the wedge and vee operations and applying Poincare duality (homology). Applying this Grassmann duality principle to the wedge product, let P=sum_kp_k, omega_k_kinLambda^p_kV, then it is possible to obtain the co-product bigvee Lambda^p_1V_1timesdotstimesLambda^p_gV_g rightarrow Lambda^P-(g-1)Vbigcup_k V_k. Grassmann's original notation implicitly combined wedgeveestar. The join wedge product is analogous to union cup, the meet vee product is analogous to intersection cap, and the orthogonal complement starmapsto^perp is negation. Together, (wedgeveestar) yield an orthocomplementary propositional lattice (quantum logic):","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(starbigvee_k omega_k)(v_1dotsv_P) = (bigwedge_kstaromega_k)(v_1dotsv_P) quad DeMorgansLaw","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"where DeMorgan's law is used to derive tensor contractions.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Definition. Symmetrically define skew left lrcorner and right llcorner contractions langleomegarangle_rcdotlangleetarangle_s = begincases omegallcornereta=omegaveestareta  rgeq s  omegalrcornereta=etaveestaromega  rleq s endcases. Note for omegaeta of equal grade, omegacircledasteta = omegaodoteta = omegacdoteta = omegallcornereta = omegalrcornereta are all symmetric. In Julia, lrcorner is  and llcorner is .","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(G3.v1 + G3.v2) ⋅ (1.5G3.v2 + G3.v3)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Definition. Let nabla = sum_kpartial_kv_k be a vector field and epsilon = sum_kepsilon_k(x)w_k in Omega^1V be unit sums of the mixed-symmetry basis. Elements of Omega^pV are known as differential p-forms and both nabla and epsilon are tensor fields dependent on xin W. Another notation for a differential form is dx_k = epsilon_k(x)w_k, such that epsilon_k = dx_kw_k and partial_komega(x) = omega(x).","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"tangent(ℝ^3)(∇)\n(ℝ^3)(∇)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Remark. The space W does not have to equal VintextVect_mathbb K above, as Omega^pV could have coefficients from mathbb K = LW.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Definition. Define differential dOmega^p VrightarrowOmega^p+1V and co-differential deltaOmega^pVrightarrowOmega^p-1V such that","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"star domega = star(nablawedgeomega) = nablatimesomega qquad omegacdotnabla = omegaveestarnabla = partialomega =-deltaomega","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"These two maps have the special properties dcirc d=0 and partialcircpartial = 0 for any form omega and vector field nabla. In topology there is boundary operator partial defined by partialepsilon = epsiloncdotnabla = sum_kpartial_kepsilon_k and is commonly discussed in terms the limit epsilon(x)cdotnablaomega(x) = lim_hrightarrow0 fracomega(x+hepsilon)-omega(x)h, which is the directional derivative.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Vorticity curl of vector-field: star d(dx_1+dx_2+dx_3) = (_2 -_3)dx_1 + (_3 -_1)dx_2 + (_1 -_2)dx_3.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"@basis tangent(ℝ^3,2,3); ⋆d(v1+v2+v3)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Boundary of 3-simplex, faces of simplex (oriented): partial(v_1234) = -partial_4v_123+partial_3v_124-partial_2v_134+partial_1v_234.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"∂(Λ(tangent(ℝ^4,2,4)).v1234)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Theorem (Integration by parts & Stokes). Let nabla inOmega_1 V be a Leibnizian vector field operator, then d-partial are Hilbert adjoint Hodge-DeRahm operators with","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"int_M domegawedgestareta +int_M omegawedgestarpartialeta = 0 qquad langle domegaastetarangle =langleomegaast-partialetarangle","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Proof. Recall, partialomega = omegacdotnabla = star^-1(staromegawedgestar^2nabla) = (-1)^n(-1)^nkstar dstaromega. Then  substitute this into the integral int_M omegawedge(-1)^mk+m+1starstar dstareta = (-1)^km+m+1(-1)^(m-k+1)(k-1)int_Momegawedge dstareta, and apply the identity (-1)^km+m+1(-1)^(m-k+1)(k-1)=(-1)^k and (-1)^kint_Momegawedge dstareta = int_M d(omegawedgestareta) - (-1)^k-1omegawedge dstareta = int_M domegawedgestareta. Stokes identity can be proved by relying on a variant of the common factor theorem by Browne.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Theorem (Clifford-Dirac-Laplacian) Dirac operator is (nabla^2)^frac12omega = pmnablaominusomega = pmnablawedgeomega pm nablacdotomega  = pm domegapmpartialomega.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"nabla^2omega = nablawedge(omegacdotnabla) + (nablawedgeomega)cdotnabla) = mp(mpomegaominusnabla)ominusnabla)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Elements omegainmathcal H^p M = nablaomega = 0midomegain Omega^pM are harmonic forms if nablaomega = 0 and hence both closed domega=0 and coclosed deltaomega=0. Hodge decomposition: Omega^pM=mathcal H^pMoplustextim(dOmega^p-1M)oplustextim(partialOmega^p+1M).","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"ω = 4.5v12 + 7.4v13\nV(∇^2)*ω == V(∇)*V(∇)*ω == d(∂(ω)) + ∂(d(ω))","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Let nablainLambda^1V, then omega = (nablabackslashnabla)ominusomega = nablabackslash(domega + partialomega) where nablaparallelpartialomega and nablaperp domega. Let's reflect across the hyperplane starnabla, then nablabackslash (domega-partialomega) = nablabackslash(domega-partialomega)ominus(nablabackslashnabla) = -nabla^2backslash(domega+partialomega)ominusnabla = -nablabackslashomegaominusnabla. Hence, reflection by hyperplane starnabla has isometry omegaoslashnabla which is a versor outermorphism.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Theorem (Cartan-Dieudonne). Every isometry of Vrightarrow V is the composite of at most k reflections across non-singular hyperplanes. Hence there exist vectors nabla_j such that","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(((omegaoslashnabla_1)oslashnabla_2)oslashcdots)oslashnabla_k = omegaoslash(nabla_1ominusnabla_2ominusdotsominusnabla_k)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"for any isometry element of the orthogonal group O(pq). Note that elements under transformations of this group preserve inner product relations. The even grade operators make up the rotational group, where each bivector isometry is a composition of two reflections.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Consider the differential equation partial_iepsilon_j = epsilon_joslashomega with the solution epsilon_j(x) = epsilon_j(0)oslash e^x_iomega where theta =2 x_i is the parameter of the Lie group. Then for a normalized omega,","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"e^thetaomega = sum_k frac(thetaomega)^ominus kk = begincases coshtheta+omegasinhtheta  textif  omega^2 = 1  costheta + omegasintheta  textif  omega^2=-1  1+thetaomega  textif  omega^2=0 endcases","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Note that nablaoslash e^thetaomega2 = nabla ominus e^thetaomega is a double covering when using the complex numbers in the Euclidean plane.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Due to GeometryTypes,jl Point interoperability, plotting and visualizing with Makie.jl is easily possible. For example, the vectorfield method creates an anonymous Point function that applies a versor outermorphism:","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"using Grassmann, Makie\nbasis\"2\" # Euclidean\nstreamplot(vectorfield(exp(π*v12/2)),-1.5..1.5,-1.5..1.5)\nstreamplot(vectorfield(exp((π/2)*v12/2)),-1.5..1.5,-1.5..1.5)\nstreamplot(vectorfield(exp((π/4)*v12/2)),-1.5..1.5,-1.5..1.5)\nstreamplot(vectorfield(v1*exp((π/4)*v12/2)),-1.5..1.5,-1.5..1.5)\n@basis S\"+-\" # Hyperbolic\nstreamplot(vectorfield(exp((π/8)*v12/2)),-1.5..1.5,-1.5..1.5)\nstreamplot(vectorfield(v1*exp((π/4)*v12/2)),-1.5..1.5,-1.5..1.5)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(Image: paper/img/plane-1.png) (Image: paper/img/plane-2.png) (Image: paper/img/plane-3.png) (Image: paper/img/plane-4.png) (Image: paper/img/plane-3.png) (Image: paper/img/plane-4.png)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"using Grassmann, Makie\n@basis S\"∞+++\"\nf(t) = (↓(exp(π*t*((3/7)*v12+v∞3))>>>↑(v1+v2+v3)))\nlines(points(f,V(2,3,4)))\n@basis S\"∞∅+++\"\nf(t) = (↓(exp(π*t*((3/7)*v12+v∞3))>>>↑(v1+v2+v3)))\nlines(points(f,V(3,4,5)))","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(Image: paper/img/torus.png) (Image: paper/img/helix.png)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"using Grassmann, Makie; @basis S\"∞+++\"\nstreamplot(vectorfield(exp((π/4)*(v12+v∞3)),V(2,3,4)),-1.5..1.5,-1.5..1.5,-1.5..1.5,gridsize=(10,10))","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(Image: paper/img/orb.png)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"using Grassmann, Makie; @basis S\"∞+++\"\nstreamplot(vectorfield(exp((π/4)*(v12+v∞3)),V(2,3,4),V(1,2,3)),-1.5..1.5,-1.5..1.5,-1.5..1.5,gridsize=(10,10))","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(Image: paper/img/wave.png)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"using Grassmann, Makie; @basis S\"∞+++\"\nf(t) = ↓(exp(t*v∞*(sin(3t)*3v1+cos(2t)*7v2-sin(5t)*4v3)/2)>>>↑(v1+v2-v3))\nlines(points(f,V(2,3,4)))","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(Image: paper/img/orb.png)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"using Grassmann, Makie; @basis S\"∞+++\"\nf(t) = ↓(exp(t*(v12+0.07v∞*(sin(3t)*3v1+cos(2t)*7v2-sin(5t)*4v3)/2))>>>↑(v1+v2-v3))\nlines(points(f,V(2,3,4)))","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(Image: paper/img/orb.png)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"As a result of Grassmann's exterior & interior products, the Hodge-DeRahm chain complex from cohomology theory has dimensional equivalence brought by the Grassmann-Poincare-Hodge complement duality,","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"mathcal H^n-pM cong fractextker(dOmega^n-pM)textim(dOmega^n-p+1M) qquad dimmathcal H^pM = dimfractextker(partialOmega^pM)textim(partialOmega^p+1M)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"The rank of the grade p boundary incidence operator is","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"textranklanglepartiallangle Mrangle_p+1rangle_p = mindimlanglepartiallangle Mrangle_p+1rangle_pdimlangle Mrangle_p+1","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Invariant topological information can be computed using the rank of homology groups, where b_p(M)=dimmathcal H^pM","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"b_p(M) = dimlangle Mrangle_p+1 - textranklanglepartiallangle Mrangle_p+1rangle_p - textranklanglepartiallangle Mrangle_p+2rangle_p+1","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"are the Betti numbers with Euler characteristic chi(M) = sum_p (-1)^pb_p.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Let's obtain the full skeleton of a simplical complex Delta(omega)=mathcal P(omega)backslashLambda^0(V) from the power set mathcal P(omega) of all vertices with each subcomplex Delta(partial(omega)) contained in the edge graph:","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Delta(omega) =  sum_g=1^nsum_k=1^nchoose gleft(textabslangleomegarangle_gk + Deltaleft(textabspartiallangleomegarangle_gkright)right)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Compute the value chi(Delta(omega))=1 and chi(Delta(partial(omega))) =   for any Simplex omega. As an exercise, also compute the corresponding betti numbers..","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"[(χ(Δ(ω)),χ(Δ(∂(ω)))) for ω ∈ (Λ(5).v12,Λ(5).v123,Λ(5).v1234,Λ(5).v12345)]","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"These methods can be applied to any MultiVector simplicial complex.","category":"page"},{"location":"algebra/#Approaching-dimensions-with-SparseAlgebra-and-ExtendedAlgebra-1","page":"Algebra","title":"Approaching ∞ dimensions with SparseAlgebra and ExtendedAlgebra","text":"","category":"section"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"In order to work with a TensorAlgebra{V}, it is necessary for some computations to be cached. This is usually done automatically when accessed.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> Λ(7) + Λ(7)'\nGrassmann.SparseAlgebra{⟨+++++++-------⟩*,16384}(v, ..., v₁₂₃₄₅₆₇w¹²³⁴⁵⁶⁷)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"One way of declaring the cache for all 3 combinations of a VectorBundle{N} and its dual is to ask for the sum Λ(V) + Λ(V)', which is equivalent to Λ(V⊕V'), but this does not initialize the cache of all 3 combinations unlike the former.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Staging of precompilation and caching is designed so that a user can smoothly transition between very high dimensional and low dimensional algebras in a single session, with varying levels of extra caching and optimizations. The parametric type formalism in Grassmann is highly expressive and enables pre-allocation of geometric algebra computations involving specific sparse subalgebras, including the representation of rotational groups.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"It is possible to reach Simplex elements with up to N=62 vertices from a TensorAlgebra having higher maximum dimensions than supported by Julia natively.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Λ(62)\nΛ(62).v32a87Ng","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"The 62 indices require full alpha-numeric labeling with lower-case and capital letters. This now allows you to reach up to 4611686018427387904 dimensions with Julia using Grassmann. Then the volume element is","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"using DirectSum # hide\nDirectSum.printindices(stdout,DirectSum.indices(UInt(2^62-1))) # hide","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Full MultiVector allocations are only possible for Nleq22, but sparse operations are also available at higher dimensions. While Grassmann.Algebra{V} is a container for the TensorAlgebra generators of V, the Grassmann.Algebra is only cached for Nleq8. For the range of dimensions 8Nleq22, the Grassmann.SparseAlgebra type is used.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> Λ(22)\nGrassmann.SparseAlgebra{⟨++++++++++++++++++++++⟩,4194304}(v, ..., v₁₂₃₄₅₆₇₈₉₀abcdefghijkl)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"This is the largest SparseAlgebra that can be generated with Julia, due to array size limitations.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"To reach higher dimensions with N22, the Grassmann.ExtendedAlgebra type is used. It is suficient to work with a 64-bit representation (which is the default). And it turns out that with 62 standard keyboard characters, this fits.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"V = ℝ^22\nΛ(V+V')","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"At 22 dimensions and lower there is better caching, with further extra caching for 8 dimensions or less. Thus, the largest Hilbert space that is fully reachable has 4,194,304 dimensions, but we can still reach out to 4,611,686,018,427,387,904 dimensions with the ExtendedAlgebra built in. It is still feasible to extend to a further super-extended 128-bit representation using the UInt128 type (but this will require further modifications of internals and helper functions. To reach into infinity even further, it is theoretically possible to construct ultra-extensions also using dictionaries. Full MultiVector elements are not representable when ExtendedAlgebra is used, but the performance of the Basis and sparse elements should be just as fast as for lower dimensions for the current SubAlgebra and TensorAlgebra types. The sparse representations are a work in progress to be improved with time.","category":"page"},{"location":"algebra/#Null-basis-of-the-projective-split-1","page":"Algebra","title":"Null-basis of the projective split","text":"","category":"section"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Let v_pm^2 = pm1 be a basis with v_infty = v_++v_- and v_emptyset = (v_--v_+)2 An embedding space mathbb R^p+1q+1 carrying the action from the group O(p+1q+1) then has v_infty^2 =0, v_emptyset^2 =0, v_infty cdot v_emptyset = 1,  and v_inftyemptyset^2 = 1 with Minkowski plane v_inftyemptyset having the Hestenes-Dirac-Clifford product properties,","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"using Grassmann; @basis S\"∞∅++\"\nv∞^2, v∅^2, v1^2, v2^2\nv∞ ⋅ v∅, v∞∅^2\nv∞∅ * v∞, v∞∅ * v∅\nv∞ * v∅, v∅ * v∞","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"For the null-basis, complement operations are different:","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"star v_infty = star(v_++v_-) = (v_- + v_+)v_1n = v_infty1n","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":" star 2v_emptyset = star(v_--v_+) = (v_+ - v_-)v_1n = -2v_emptyset1n","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"The Hodge complement satisfies langleomegaastomegarangle I=omegawedgestaromega. This property is naturally a result of using the geometric product in the definition. An additional metric independent version of the complement operation is available with the ! operator,","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"v_infty = (v_++v_-) = (v_- - v_+)v_1n = 2v_emptyset1n","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"2v_emptyset = (v_--v_+) = (v_+ + v_-)v_1n = -v_infty1n","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"For that variation of complement, omega^2 I = omegawedgeomega holds.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"⋆v∞, !v∞, ⋆v∅, !v∅\n!v∞ * v12 == -2v∅, !v∅ * v12 == v∞/2\n⋆v∞ * v12 == -v∞, ⋆v∅ * v12 == v∅\nv∞ * !v∞, v∅ * !v∅","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"In this example, the null-basis properties from the projective split are shown.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"tangent(S\"∞∅++\",2,4)(∇^2)","category":"page"},{"location":"algebra/#Differential-forms-and-tangent-algebra-1","page":"Algebra","title":"Differential forms and tangent algebra","text":"","category":"section"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Definition (Symmetric Leibniz differentials): Let partial_k = fracpartialpartial x_kin L_gV be Leibnizian symmetric tensors, then there is an equivalence relation asymp which holds for each sigmain S_p","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(partial_p circ dotscirc  partial_1)omega asymp(bigotimes_k partial_sigma(k))omega  iff ominus_kpartial_k = bigodot_kpartial_k","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"along with each derivation partial_k(omegaeta) = partial_k(omega)eta + omegapartial_k(eta).","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"The product rule is encoded into Grassmann algebra when a tangent bundle is used, demonstrated here symbolically with Reduce by using the dual number definition:","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> using Grassmann, Reduce\nReduce (Free CSL version, revision 4590), 11-May-18 ...\n\njulia> @mixedbasis tangent(ℝ^1)\n(⟨+-₁¹⟩*, v, v₁, w¹, ϵ₁, ∂¹, v₁w¹, v₁ϵ₁, v₁∂¹, w¹ϵ₁, w¹∂¹, ϵ₁∂¹, v₁w¹ϵ₁, v₁w¹∂¹, v₁ϵ₁∂¹, w¹ϵ₁∂¹, v₁w¹ϵ₁∂¹)\n\njulia> a,b = :x*v1 + :dx*ϵ1, :y*v1 + :dy*ϵ1\n(xv₁ + dxϵ₁, yv₁ + dyϵ₁)\n\njulia> a * b\nx * y + (dy * x + dx * y)v₁ϵ₁","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Higher order and multivariable Taylor numbers are also supported.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"@basis tangent(ℝ,2,2) # 1D Grade, 2nd Order, 2 Variables\n∂1 * ∂1v1\n∂1 * ∂2\nv1*∂12\n∂12*∂2 # 3rd order is zero\n@mixedbasis tangent(ℝ^2,2,2); # 2D Grade, 2nd Order, 2 Variables\nV(∇) # vector field\nV(∇) ⋅ V(∇) # Laplacian\nans*∂1 # 3rd order is zero","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Multiplication with an epsilon_i element is used help signify tensor fields so that differential operators are automatically applied in the Basis algebra as ∂ⱼ⊖(ω⊗ϵᵢ) = ∂ⱼ(ωϵᵢ) ≠ (∂ⱼ⊗ω)⊖ϵᵢ.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> using Reduce, Grassmann; @mixedbasis tangent(ℝ^2,3,2);\n\njulia> (∂1+∂12) * (:(x1^2*x2^2)*ϵ1 + :(sin(x1))*ϵ2)\n0.0 + (2 * x1 * x2 ^ 2)∂₁ϵ¹ + (cos(x1))∂₁ϵ² + (4 * x1 * x2)∂₁₂ϵ¹","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Although fully generalized, the implementation in this release is still experimental.","category":"page"},{"location":"algebra/#Symbolic-coefficients-by-declaring-algebra-1","page":"Algebra","title":"Symbolic coefficients by declaring algebra","text":"","category":"section"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Due to the abstract generality of the code generation of the Grassmann product algebra, it is easily possible to extend the entire set of operations to other kinds of scalar coefficient types.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> using GaloisFields, Grassmann\n\njulia> const F = GaloisField(7)\n𝔽₇\n\njulia> basis\"2\"\n(⟨++⟩, v, v₁, v₂, v₁₂)\n\njulia> F(3)*v1\n3v₁\n\njulia> inv(ans)\n5v₁","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"By default, the coefficients are required to be <:Number. However, if this does not suit your needs, alternative scalar product algebras can be specified with","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Grassmann.generate_algebra(:AbstractAlgebra,:SetElem)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"where :SetElem is the desired scalar field and :AbstractAlgebra is the scope which contains the scalar field.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"With the usage of Requires, symbolic scalar computation with Reduce.jl and other packages is automatically enabled,","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> using Reduce, Grassmann\nReduce (Free CSL version, revision 4590), 11-May-18 ...\n\njulia> basis\"2\"\n(⟨++⟩, v, v₁, v₂, v₁₂)\n\njulia> (:a*v1 + :b*v2) ⋅ (:c*v1 + :d*v2)\n(a * c + b * d)v\n\njulia> (:a*v1 + :b*v2) ∧ (:c*v1 + :d*v2)\n0.0 + (a * d - b * c)v₁₂\n\njulia> (:a*v1 + :b*v2) * (:c*v1 + :d*v2)\na * c + b * d + (a * d - b * c)v₁₂","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"If these compatibility steps are followed, then Grassmann will automatically declare the product algebra to use the Reduce.Algebra symbolic field operation scope.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> using Reduce,Grassmann; basis\"4\"\nReduce (Free CSL version, revision 4590), 11-May-18 ...\n(⟨++++⟩, v, v₁, v₂, v₃, v₄, v₁₂, v₁₃, v₁₄, v₂₃, v₂₄, v₃₄, v₁₂₃, v₁₂₄, v₁₃₄, v₂₃₄, v₁₂₃₄)\n\njulia> P,Q = :px*v1 + :py*v2 + :pz* v3 + v4, :qx*v1 + :qy*v2 + :qz*v3 + v4\n(pxv₁ + pyv₂ + pzv₃ + 1.0v₄, qxv₁ + qyv₂ + qzv₃ + 1.0v₄)\n\njulia> P∧Q\n0.0 + (px * qy - py * qx)v₁₂ + (px * qz - pz * qx)v₁₃ + (px - qx)v₁₄ + (py * qz - pz * qy)v₂₃ + (py - qy)v₂₄ + (pz - qz)v₃₄\n\njulia> R = :rx*v1 + :ry*v2 + :rz*v3 + v4\nrxv₁ + ryv₂ + rzv₃ + 1.0v₄\n\njulia> P∧Q∧R\n0.0 + ((px * qy - py * qx) * rz - ((px * qz - pz * qx) * ry - (py * qz - pz * qy) * rx))v₁₂₃ + (((px * qy - py * qx) + (py - qy) * rx) - (px - qx) * ry)v₁₂₄ + (((px * qz - pz * qx) + (pz - qz) * rx) - (px - qx) * rz)v₁₃₄ + (((py * qz - pz * qy) + (pz - qz) * ry) - (py - qy) * rz)v₂₃₄","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"It should be straight-forward to easily substitute any other extended algebraic operations and fields; issues with questions or pull-requests to that end are welcome.","category":"page"},{"location":"tutorials/quick-start/#Quick-start-(G2)-1","page":"Quick start (G2)","title":"Quick start (G2)","text":"","category":"section"},{"location":"tutorials/quick-start/#","page":"Quick start (G2)","title":"Quick start (G2)","text":"Import the Grassmann package and instantiate a two-dimensional algebra (G2),","category":"page"},{"location":"tutorials/quick-start/#","page":"Quick start (G2)","title":"Quick start (G2)","text":"using Grassmann\n@basis ℝ^2\nv1*v2 # geometric product\nv1|v2 # inner product\nv1∧v2 # exterior product","category":"page"},{"location":"tutorials/quick-start/#Reflection-1","page":"Quick start (G2)","title":"Reflection","text":"","category":"section"},{"location":"tutorials/quick-start/#","page":"Quick start (G2)","title":"Quick start (G2)","text":"a = v1+v2\nn = v1\n-n*a/n # reflect a in hyperplane normal to n","category":"page"},{"location":"tutorials/quick-start/#Rotation-1","page":"Quick start (G2)","title":"Rotation","text":"","category":"section"},{"location":"tutorials/quick-start/#","page":"Quick start (G2)","title":"Quick start (G2)","text":"R = exp(π/4*v12)\n~R*v1*R","category":"page"}]
}
