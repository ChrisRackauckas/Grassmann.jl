var documenterSearchIndex = {"docs":
[{"location":"library/#Grassmann.jl-Library-1","page":"Library","title":"Grassmann.jl Library","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Pages = [\"index.md\",\"library.md\"]","category":"page"},{"location":"library/#Index-1","page":"Library","title":"Index","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Pages = [\"library.md\"]","category":"page"},{"location":"library/#Grassmann-Interface-1","page":"Library","title":"Grassmann Interface","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.complementrighthodge","category":"page"},{"location":"library/#Grassmann.complementrighthodge","page":"Library","title":"Grassmann.complementrighthodge","text":"complementrighthodge(ω::TensorAlgebra)\n\nGrassmann-Poincare-Hodge complement: ⋆ω = ω∗I\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.complementlefthodge","category":"page"},{"location":"library/#Grassmann.complementlefthodge","page":"Library","title":"Grassmann.complementlefthodge","text":"complementlefthodge(ω::TensorAlgebra)\n\nGrassmann-Poincare left complement: ⋆'ω = I∗'ω\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.reverse","category":"page"},{"location":"library/#Base.reverse","page":"Library","title":"Base.reverse","text":"~(ω::TensorAlgebra)\n\nReverse of a MultiVector element: ~ω = (-1)^(grade(ω)(grade(ω)-1)/2)ω\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.involute","category":"page"},{"location":"library/#AbstractTensors.involute","page":"Library","title":"AbstractTensors.involute","text":"involute(ω::TensorAlgebra)\n\nInvolute of a MultiVector element: ~ω = (-1)^grade(ω)*ω\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.:∧","category":"page"},{"location":"library/#AbstractLattices.:∧","page":"Library","title":"AbstractLattices.:∧","text":"∧(ω::TensorAlgebra,η::TensorAlgebra)\n\nExterior product as defined by the anti-symmetric quotient Λ≡⊗/~\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.:∨","category":"page"},{"location":"library/#AbstractLattices.:∨","page":"Library","title":"AbstractLattices.:∨","text":"∨(ω::TensorAlgebra,η::TensorAlgebra)\n\nRegressive product as defined by the DeMorgan's law: ∨(ω...) = ⋆⁻¹(∧(⋆.(ω)...))\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"etc, ...","category":"page"},{"location":"#Grassmann.jl-1","page":"Home","title":"Grassmann.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"⟨Leibniz-Grassmann-Clifford-Hestenes⟩ differential geometric algebra / multivector simplicial complex","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: Build Status) (Image: Build status) (Image: Coverage Status) (Image: codecov.io) (Image: Gitter) (Image: Liberapay patrons)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The Grassmann.jl package provides tools for doing computations based on multi-linear algebra, differential geometry, and spin groups using the extended tensor algebra known as Leibniz-Grassmann-Clifford-Hestenes geometric algebra. Combinatorial products include ∧, ∨, ⋅, *, ⋆, ', ~, ∂ (which are the exterior, regressive, inner, and geometric products; along with the Hodge star, adjoint, reversal, and boundary operators). The kernelized operations are built up from composite sparse tensor products and Hodge duality, with high dimensional support for up to 62 indices using staged caching and precompilation. Code generation enables concise yet highly extensible definitions. The DirectSum.jl multivector parametric type polymorphism is based on tangent bundle vector spaces and conformal projective geometry to make the dispatch highly extensible for many applications. Additionally, the universal interoperability between different sub-algebras is enabled by AbstractTensors.jl, on which the type system is built.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: YouTube) (Image: DropBox) (Image: DOI) (Image: BiVector)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"index.md\",\"library.md\",\"docs.md\"]","category":"page"}]
}
