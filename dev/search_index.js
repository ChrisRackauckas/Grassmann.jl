var documenterSearchIndex = {"docs":
[{"location":"references/#References-1","page":"References","title":"References","text":"","category":"section"},{"location":"references/#","page":"References","title":"References","text":"(Image: YouTube) (Image: DropBox) (Image: Docs Stable) (Image: Docs Dev) (Image: Gitter) (Image: BiVector)","category":"page"},{"location":"references/#","page":"References","title":"References","text":"Michael Reed, Differential geometric algebra with Leibniz and Grassmann. 2019.\nEmil Artin, Geometric Algebra. 1957.\nJohn Browne, Grassmann Algebra, Volume 1: Foundations. 2011.\nC. Doran, D. Hestenes, F. Sommen, and N. Van Acker, Lie groups as spin groups, J. Math Phys. (1993)\nDavid Hestenes, Universal Geometric Algebra, Pure and Applied (1988)\nDavid Hestenes, Tutorial on geometric calculus. Advances in Applied Clifford Algebra, 2013.\nLachlan Gunn, Derek Abbott, James Chappell, Ashar Iqbal, Functions of multivector variables. 2011.\nAaron D. Schutte, A nilpotent algebra approach to Lagrangian mechanics and constrained motion. 2016.\nVladimir and Tijana Ivancevic, Undergraduate lecture notes in DeRahm-Hodge theory. arXiv, 2011.\nPeter Woit, Clifford algebras and spin groups, Lecture Notes (2012)","category":"page"},{"location":"tutorials/install/#Installation-1","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"Grassmann.jl is a package for the Julia language, which should be installed from website or the recommended method for your operating system (GNU/Linux/Mac/Windows).","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"Availability of this package and its subpackages can be automatically handled with the Julia package manager with using Pkg and Pkg.add(\"Grassmann\") or by entering:","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"pkg> add Grassmann","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"If you would like to keep up to date with the latest commits, instead use","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"pkg> add Grassmann#master","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"which is not recommended if you want to use a stable release.","category":"page"},{"location":"tutorials/install/#Requirements-1","page":"Installation","title":"Requirements","text":"","category":"section"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"When the master branch is used it is possible that some of the dependencies also require a development branch before the release. This may include (but is not limited to) the following packages:","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"This requires a merged version of ComputedFieldTypes at ComputedFieldTypes.jl.","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"Interoperability of TensorAlgebra with other packages is automatically enabled by DirectSum.jl and AbstractTensors.jl.","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"The package is compatible via Requires.jl with  Reduce.jl, SymPy.jl, SymEngine.jl, AbstractAlgebra.jl, Nemo.jl, GaloisFields.jl, LightGraphs,jl, Compose.jl, GeometryTypes,jl, Makie.jl.","category":"page"},{"location":"tutorials/mixed-tensors/#Mixed-tensor-product-1","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"","category":"section"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"Groups such as SU(n) can alternatively be represented with the dual Grassmann’s exterior product algebra, generating a 2^(2n)-dimensional mother algebra with geometric product from the n-dimensional vector space and its dual vector space. The product of the vector basis and covector basis elements form the n^2-dimensional bivector subspace of the full (2n)!/(2(2n−2)!)-dimensional bivector sub-algebra. The package Grassmann is working towards making the full extent of this number system available in Julia by using static compiled parametric type information to handle sparse sub-algebras, such as the (1,1)-tensor bivector algebra.","category":"page"},{"location":"tutorials/mixed-tensors/#Constructing-linear-transformations-1","page":"Mixed tensor product ⊗","title":"Constructing linear transformations","text":"","category":"section"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"Note that Λ(3) gives the vector basis, and Λ(3)' gives the covector basis:","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"julia> Λ(3)\nGrassmann.Algebra{⟨+++⟩,8}(v, v₁, v₂, v₃, v₁₂, v₁₃, v₂₃, v₁₂₃)\n\njulia> Λ(3)'\nGrassmann.Algebra{⟨---⟩',8}(w, w¹, w², w³, w¹², w¹³, w²³, w¹²³)","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"The following command yields a local 2D vector and covector basis,","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"julia> mixedbasis\"2\"\n(⟨++--⟩*, v, v₁, v₂, w¹, w², v₁₂, v₁w¹, v₁w², v₂w¹, v₂w², w¹², v₁₂w¹, v₁₂w², v₁w¹², v₂w¹², v₁₂w¹²)\n\njulia> w1+2w2\n1w¹ + 2w²\n\njulia> ans(v1+v2)\n3v","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"The sum w1+2w2 is interpreted as a covector element of the dual vector space, which can be evaluated as a linear functional when a vector argument is input. Using these in the workspace, it is possible to use the Grassmann exterior ∧-tensor product operation to construct elements ℒ of the (1,1)-bivector subspace of linear transformations from the Grade{2} algebra.","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"julia> ℒ = (v1+2v2)∧(3w1+4w2)\n0v₁₂ + 3v₁w¹ + 4v₁w² + 6v₂w¹ + 8v₂w² + 0w¹²","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"The element ℒ is a linear form which can take Grade{1} vectors as input,","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"julia> ℒ(v1+v2)\n7v₁ + 14v₂ + 0w¹ + 0w²\n\njulia> L = [1,2] * [3,4]'; L * [1,1]\n2-element Array{Int64,1}:\n  7\n 14","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"which is a computation equivalent to a matrix computation.","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"The TensorAlgebra evalution is still a work in progress, and the API and implementation may change as more features and algebraic operations and product structure are added.","category":"page"},{"location":"tutorials/mixed-tensors/#Importing-the-generators-of-the-Leech-lattice-1","page":"Mixed tensor product ⊗","title":"Importing the generators of the Leech lattice","text":"","category":"section"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"In the example below, we define a constant Leech which can be used to obtain linear combinations of the Leech lattice,","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"julia> using Grassmann\n\njulia> generator = [8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0;\n       2 2 2 2 0 0 0 0 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0;\n       4 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0;\n       2 2 0 0 2 2 0 0 2 2 0 0 2 2 0 0 0 0 0 0 0 0 0 0;\n       2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 0 0 0 0 0 0 0 0;\n       2 0 0 2 2 0 0 2 2 0 0 2 2 0 0 2 0 0 0 0 0 0 0 0;\n       4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0;\n       2 0 2 0 2 0 0 2 2 2 0 0 0 0 0 0 2 2 0 0 0 0 0 0;\n       2 0 0 2 2 2 0 0 2 0 2 0 0 0 0 0 2 0 2 0 0 0 0 0;\n       2 2 0 0 2 0 2 0 2 0 0 2 0 0 0 0 2 0 0 2 0 0 0 0;\n       0 2 2 2 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0 0;\n       0 0 0 0 0 0 0 0 2 2 0 0 2 2 0 0 2 2 0 0 2 2 0 0;\n       0 0 0 0 0 0 0 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0 2 0;\n       -3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]\n\njulia> const E24,W24 = Λ(24), ℝ^24+(ℝ^24)';\n\njulia> const Leech = SChain{W24,Float64}(generator./sqrt(8));\n\njulia> typeof(Leech)\nSChain{⟨++++++++++++++++++++++++------------------------⟩*,2,Float64,1128}\n\njulia> ndims(vectorspace(Leech))\n48","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"The Leech generator matrix is contained in the 1128-dimensional bivector subalgebra of the space with 48 indices.","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"julia> Leech(E24.v1)\n2.82842712474619v₁ + 0.0v₂ + 0.0v₃ + 0.0v₄ + 0.0v₅ + 0.0v₆ + 0.0v₇ + 0.0v₈ + 0.0v₉ + 0.0v₀ + 0.0va + 0.0vb + 0.0vc + 0.0vd + 0.0ve + 0.0vf + 0.0vg + 0.0vh + 0.0vi + 0.0vj + 0.0vk + 0.0vl + 0.0vm + 0.0vn + 0.0w¹ + 0.0w² + 0.0w³ + 0.0w⁴ + 0.0w⁵ + 0.0w⁶ + 0.0w⁷ + 0.0w⁸ + 0.0w⁹ + 0.0w⁰ + 0.0wA + 0.0wB + 0.0wC + 0.0wD + 0.0wE + 0.0wF + 0.0wG + 0.0wH + 0.0wI + 0.0wJ + 0.0wK + 0.0wL + 0.0wM + 0.0wN\n\njulia> Leech(E24.v2)\n1.414213562373095v₁ + 1.414213562373095v₂ + 0.0v₃ + 0.0v₄ + 0.0v₅ + 0.0v₆ + 0.0v₇ + 0.0v₈ + 0.0v₉ + 0.0v₀ + 0.0va + 0.0vb + 0.0vc + 0.0vd + 0.0ve + 0.0vf + 0.0vg + 0.0vh + 0.0vi + 0.0vj + 0.0vk + 0.0vl + 0.0vm + 0.0vn + 0.0w¹ + 0.0w² + 0.0w³ + 0.0w⁴ + 0.0w⁵ + 0.0w⁶ + 0.0w⁷ + 0.0w⁸ + 0.0w⁹ + 0.0w⁰ + 0.0wA + 0.0wB + 0.0wC + 0.0wD + 0.0wE + 0.0wF + 0.0wG + 0.0wH + 0.0wI + 0.0wJ + 0.0wK + 0.0wL + 0.0wM + 0.0wN\n\njulia> Leech(E24.v3)\n1.414213562373095v₁ + 0.0v₂ + 1.414213562373095v₃ + 0.0v₄ + 0.0v₅ + 0.0v₆ + 0.0v₇ + 0.0v₈ + 0.0v₉ + 0.0v₀ + 0.0va + 0.0vb + 0.0vc + 0.0vd + 0.0ve + 0.0vf + 0.0vg + 0.0vh + 0.0vi + 0.0vj + 0.0vk + 0.0vl + 0.0vm + 0.0vn + 0.0w¹ + 0.0w² + 0.0w³ + 0.0w⁴ + 0.0w⁵ + 0.0w⁶ + 0.0w⁷ + 0.0w⁸ + 0.0w⁹ + 0.0w⁰ + 0.0wA + 0.0wB + 0.0wC + 0.0wD + 0.0wE + 0.0wF + 0.0wG + 0.0wH + 0.0wI + 0.0wJ + 0.0wK + 0.0wL + 0.0wM + 0.0wN\n\n...","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"Then a TensorAlgebra evaluation of Leech at an Integer linear combination would be","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"julia> Leech(E24.v1 + 2*E24.v2)\n5.65685424949238v₁ + 2.82842712474619v₂ + 0.0v₃ + 0.0v₄ + 0.0v₅ + 0.0v₆ + 0.0v₇ + 0.0v₈ + 0.0v₉ + 0.0v₀ + 0.0va + 0.0vb + 0.0vc + 0.0vd + 0.0ve + 0.0vf + 0.0vg + 0.0vh + 0.0vi + 0.0vj + 0.0vk + 0.0vl + 0.0vm + 0.0vn + 0.0w¹ + 0.0w² + 0.0w³ + 0.0w⁴ + 0.0w⁵ + 0.0w⁶ + 0.0w⁷ + 0.0w⁸ + 0.0w⁹ + 0.0w⁰ + 0.0wA + 0.0wB + 0.0wC + 0.0wD + 0.0wE + 0.0wF + 0.0wG + 0.0wH + 0.0wI + 0.0wJ + 0.0wK + 0.0wL + 0.0wM + 0.0wN\n\njulia> ans⋅ans\n39.99999999999999v\n\njulia> Leech(E24.v2 + E24.v5)\n2.82842712474619v₁ + 1.414213562373095v₂ + 0.0v₃ + 0.0v₄ + 0.0v₅ + 0.0v₆ + 0.0v₇ + 0.0v₈ + 0.0v₉ + 0.0v₀ + 1.414213562373095va + 0.0vb + 0.0vc + 0.0vd + 0.0ve + 0.0vf + 0.0vg + 0.0vh + 0.0vi + 0.0vj + 0.0vk + 0.0vl + 0.0vm + 0.0vn + 0.0w¹ + 0.7071067811865475w² + 1.414213562373095w³ + 1.414213562373095w⁴ + 0.0w⁵ + 0.0w⁶ + 0.0w⁷ + 0.0w⁸ + 0.0w⁹ + 0.0w⁰ + 0.0wA + 0.0wB + 0.0wC + 0.0wD + 0.0wE + 0.0wF + 0.0wG + 0.0wH + 0.0wI + 0.0wJ + 0.0wK + 0.0wL + 0.0wM + 0.0wN\n\njulia> ans⋅ans\n7.499999999999998v","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"The Grassmann package is designed to smoothly handle high-dimensional bivector algebras with headroom to spare. Although some of these calculations may have an initial delay, repeated calls are fast due to built-in caching and pre-compilation.","category":"page"},{"location":"tutorials/mixed-tensors/#","page":"Mixed tensor product ⊗","title":"Mixed tensor product ⊗","text":"In future updates, more emphasis will be placed on increased type-stability with more robust sparse output allocation in the computational graph and minimal footprint but maximal type-stability for intermediate results and output.","category":"page"},{"location":"design/#TensorAlgebra-design,-Manifold-code-generation-1","page":"Design","title":"TensorAlgebra design, Manifold code generation","text":"","category":"section"},{"location":"design/#","page":"Design","title":"Design","text":"Mathematical foundations and definitions specific to the Grassmann.jl implementation provide an extensible platform for computing with geometric algebra at high dimensions, along with the accompanying support packages.  The design is based on the TensorAlgebra abstract type interoperability from AbstractTensors.jl with a VectorBundle parameter from DirectSum.jl. Abstract tangent vector space type operations happen at compile-time, resulting in a differential conformal geometric algebra of hyper-dual multivector forms.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The nature of the geometric algebra code generation enables one to easily extend the abstract product operations to any specific number field type (including differential operators with Leibniz.jl or symbolic coefficients with Reduce.jl), by making use of Julia's type system. Mixed tensor products with their coefficients are constructed from these operations to work with bivector elements of Lie groups.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"DirectSum.jl: Abstract tangent bundle vector space types (unions, intersections, sums, etc.)\nAbstractTensors.jl: Tensor algebra abstract type interoperability with vector bundle parameter\nGrassmann.jl: ⟨Leibniz-Grassmann-Clifford-Hestenes⟩ differential geometric algebra of multivector forms\nLeibniz.jl: Derivation operator algebras for tensor fields\nReduce.jl: Symbolic parser generator for Julia expressions using REDUCE algebra term rewriter","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Mathematics of Grassmann can be used to study unitary groups used in quantum computing by building efficient computational representations of their algebras. Applicability of the Grassmann computational package not only maps to quantum computing, but has the potential of impacting countless other engineering and scientific computing applications. It can be used to work with automatic differentiation and differential geometry, algebraic forms and invariant theory, electric circuits and wave scattering, spacetime geometry and relativity, computer graphics and photogrammetry, and much more.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Thus, computations involving fully general rotational algebras and Lie bivector groups are possible with a full trigonometric suite. Conformal geometric algebra is possible with the Minkowski plane v_inftyemptyset, based on the null-basis. In general, multivalued quantum logic is enabled by the wedgeveestar Grassmann lattice. Mixed-symmetry algebra with Leibniz.jl and Grassmann.jl, having the geometric algebraic product chain rule, yields automatic differentiation and Hodge-DeRahm co/homology  as unveiled by Grassmann. Most importantly, the Dirac-Clifford product yields generalized Hodge-Laplacian and the Betti numbers with Euler characteristic χ.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Due to the abstract generality of the product algebra code generation, it is possible to extend the Grassmann library to include additional high performance products with few extra definitions. Operations on ultra-sparse representations for very high dimensional algebras will be gaining further performance enhancements in future updates, along with hybrid optimizations for low-dimensional algebra code generation. Thanks to the design of the product algebra code generation, any additional optimizations to the type stability will automatically enhance all the different products simultaneously. Likewise, any new product formulas will be able to quickly gain from the setup of all of the existing optimizations.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The Grassmann.jl package and its accompanying support packages provide an extensible platform for high performance computing with geometric algebra at high dimensions. This enables the usage of many different types of TensorAlgebra along with various VectorBundle parameters and interoperability for a wide range of scientific and research applications.","category":"page"},{"location":"design/#Direct-sum-yields-VectorBundle-parametric-type-polymorphism-1","page":"Design","title":"Direct-sum yields VectorBundle parametric type polymorphism ⨁","text":"","category":"section"},{"location":"design/#","page":"Design","title":"Design","text":"The DirectSum.jl package is a work in progress providing the necessary tools to work with an arbitrary Manifold specified by an encoding. Due to the parametric type system for the generating VectorBundle, the Julia compiler can fully preallocate and often cache values efficiently ahead of run-time. Although intended for use with the Grassmann.jl package, DirectSum can be used independently.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Let N be the rank of a Manifold{N}. The type VectorBundle{N,P,g,ν,μ} uses byte-encoded data available at pre-compilation, where P specifies the basis for up and down projection, g is a bilinear form that specifies the metric of the space, and μ is an integer specifying the order of the tangent bundle (i.e. multiplicity limit of Leibniz-Taylor monomials). Lastly, ν is the number of tangent variables.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The metric signature of the Basis{V,1} elements of a vector space V can be specified with the V\"...\" constructor by using + and - to specify whether the Basis{V,1} element of the corresponding index squares to +1 or -1. For example, S\"+++\" constructs a positive definite 3-dimensional VectorBundle.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"julia> ℝ^3 == V\"+++\" == vectorspace(3)\ntrue","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"It is also possible to specify an arbitrary DiagonalForm having numerical values for the basis with degeneracy D\"1,1,1,0\", although the Signature format has a more compact representation. Further development will result in more metric types.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Declaring an additional plane at infinity is done by specifying it in the string constructor with ∞ at the first index (i.e. Riemann sphere S\"∞+++\"). The hyperbolic geometry can be declared by ∅ subsequently (i.e. Minkowski spacetime S\"∅+++\"). Additionally, the null-basis based on the projective split for confromal geometric algebra would be specified with ∞∅ initially (i.e. 5D CGA S\"∞∅+++\"). These two declared basis elements are interpreted in the type system.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The tangent map takes V to its tangent space and can be applied repeatedly for higher orders, such that tangent(V,μ,ν) can be used to specify μ and ν.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"julia> V = tangent(ℝ^3)\n⟨+++₁⟩\n\njulia> V'\n⟨---¹⟩'\n\njulia> V+V'\n⟨+++---₁¹⟩*","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The direct sum operator ⊕ can be used to join spaces (alternatively +), and the dual space functor ' is an involution which toggles a dual vector space with inverted signature.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"julia> V = ℝ'⊕ℝ^3\n⟨-+++⟩\n\njulia> V'\n⟨+---⟩'\n\njulia> W = V⊕V'\n⟨-++++---⟩*","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The direct sum of a VectorBundle and its dual V⊕V' represents the full mother space V*.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"julia> collect(V) # all vector basis elements\nGrassmann.Algebra{⟨-+++⟩,16}(v, v₁, v₂, v₃, v₄, v₁₂, v₁₃, v₁₄, v₂₃, v₂₄, v₃₄, v₁₂₃, v₁₂₄, v₁₃₄, ...)\n\njulia> collect(V') # all covector basis elements\nGrassmann.Algebra{⟨+---⟩',16}(w, w¹, w², w³, w⁴, w¹², w¹³, w¹⁴, w²³, w²⁴, w³⁴, w¹²³, w¹²⁴, w¹³⁴, ...)\n\njulia> collect(W) # all mixed basis elements\nGrassmann.Algebra{⟨-++++---⟩*,256}(v, v₁, v₂, v₃, v₄, w¹, w², w³, w⁴, v₁₂, v₁₃, v₁₄, v₁w¹, v₁w², ...","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"In addition to the direct-sum operation, several other operations are supported, such as ∪,∩,⊆,⊇ for set operations. Due to the design of the VectorBundle dispatch, these operations enable code optimizations at compile-time provided by the bit parameters.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"julia> ℝ+ℝ' ⊇ vectorspace(1)\ntrue\n\njulia> ℝ ∩ ℝ' == vectorspace(0)\ntrue\n\njulia> ℝ ∪ ℝ' == ℝ+ℝ'\ntrue","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Remark. Although some of the operations like ∪ and ⊕ are similar and sometimes result in the same values, the union and sum are entirely different operations in general.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Calling manifolds with sets of indices constructs the subspace representations. Given M(s::Int...) one can encode SubManifold{length(s),M,s} with induced orthogonal space, such that computing unions of submanifolds is done by inspecting the parameter s. Operations on Manifold types is automatically handled at compile time.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"More information about DirectSum is available  at https://github.com/chakravala/DirectSum.jl","category":"page"},{"location":"design/#Interoperability-for-TensorAlgebra{V}-1","page":"Design","title":"Interoperability for TensorAlgebra{V}","text":"","category":"section"},{"location":"design/#","page":"Design","title":"Design","text":"The AbstractTensors package is intended for universal interoperability of the abstract TensorAlgebra type system. All TensorAlgebra{V} subtypes have type parameter V, used to store a VectorBundle value obtained from DirectSum.jl. By itself, this package does not impose any specifications or structure on the TensorAlgebra{V} subtypes and elements, aside from requiring V to be a VectorBundle. This means that different packages can create tensor types having a common underlying VectorBundle structure.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"The key to making the whole interoperability work is that each TensorAlgebra subtype shares a VectorBundle parameter (with all isbitstype parameters), which contains all the info needed at compile time to make decisions about conversions. So other packages need only use the vector space information to decide on how to convert based on the implementation of a type. If external methods are needed, they can be loaded by Requires when making a separate package with TensorAlgebra interoperability.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Since VectorBundle choices are fundamental to TensorAlgebra operations, the universal interoperability between TensorAlgebra{V} elements with different associated VectorBundle choices is naturally realized by applying the union morphism to operations. Some of the method names like +,-,\\otimes,\\times,\\cdot,* for TensorAlgebra elements are shared across different packages, with interoperability.","category":"page"},{"location":"design/#","page":"Design","title":"Design","text":"Additionally, a universal unit volume element can be specified in terms of LinearAlgebra.UniformScaling, which is independent of V and has its interpretation only instantiated by the context of the TensorAlgebra{V} element being operated on. The universal interoperability of LinearAlgebra.UniformScaling as a pseudoscalar element which takes on the VectorBundle form of any other TensorAlgebra element is handled globally. This enables the usage of I from LinearAlgebra as a universal pseudoscalar element.","category":"page"},{"location":"library/#Grassmann.jl-Library-1","page":"Library","title":"Grassmann.jl Library","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Pages = [\"index.md\",\"design.md\",\"algebra.md\",\"library.md\",\"references.md\"]","category":"page"},{"location":"library/#Index-1","page":"Library","title":"Index","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Pages = [\"library.md\"]","category":"page"},{"location":"library/#DirectSum-Interface-1","page":"Library","title":"DirectSum Interface","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.Manifold","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.VectorBundle","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.Signature","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.DiagonalForm","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.SubManifold","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.vectorspace","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.diagonalform","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.var\"@V_str\"","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.var\"@S_str\"","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.var\"@D_str\"","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.value","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.grade","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.tangent","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.indices","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.printindices","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.printlabel","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.indexstring","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.indexsymbol","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"DirectSum.:⊕","category":"page"},{"location":"library/#AbstractTensors-Interface-1","page":"Library","title":"AbstractTensors Interface","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"AbstractTensors.TensorAlgebra","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"AbstractTensors.interop","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"AbstractTensors.interform","category":"page"},{"location":"library/#Grassmann-Interface-1","page":"Library","title":"Grassmann Interface","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.TensorGraded","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.TensorTerm","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.TensorMixed","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.Basis","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.Simplex","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.Chain","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.MultiVector","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grasmann.SparseChain","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.MultiGrade","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.valuetype","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.basis","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.order","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.χ","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.gdims","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.betti","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.scalar","category":"page"},{"location":"library/#AbstractTensors.scalar","page":"Library","title":"AbstractTensors.scalar","text":"scalar(multivector)\n\nReturn the scalar (grade 0) part of any multivector.\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.vector","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.volume","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.isscalar","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.angular","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.radial","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.complementrighthodge","category":"page"},{"location":"library/#Grassmann.complementrighthodge","page":"Library","title":"Grassmann.complementrighthodge","text":"complementrighthodge(ω::TensorAlgebra)\n\nGrassmann-Poincare-Hodge complement: ⋆ω = ω∗I\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.complementlefthodge","category":"page"},{"location":"library/#Grassmann.complementlefthodge","page":"Library","title":"Grassmann.complementlefthodge","text":"complementlefthodge(ω::TensorAlgebra)\n\nGrassmann-Poincare left complement: ⋆'ω = I∗'ω\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.complementright","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.complementleft","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.reverse","category":"page"},{"location":"library/#Base.reverse","page":"Library","title":"Base.reverse","text":"~(ω::TensorAlgebra)\n\nReverse of a MultiVector element: ~ω = (-1)^(grade(ω)(grade(ω)-1)/2)ω\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.involute","category":"page"},{"location":"library/#AbstractTensors.involute","page":"Library","title":"AbstractTensors.involute","text":"involute(ω::TensorAlgebra)\n\nInvolute of a MultiVector element: ~ω = (-1)^grade(ω)*ω\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.:∗","category":"page"},{"location":"library/#AbstractTensors.:∗","page":"Library","title":"AbstractTensors.:∗","text":"∗(a::TensorAlgebra,b::TensorAlgebra)\n\nReversed geometric product: a∗b = (~a)*b\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.:⊛","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.:∧","category":"page"},{"location":"library/#AbstractLattices.:∧","page":"Library","title":"AbstractLattices.:∧","text":"∧(ω::TensorAlgebra,η::TensorAlgebra)\n\nExterior product as defined by the anti-symmetric quotient Λ≡⊗/~\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.:∨","category":"page"},{"location":"library/#AbstractLattices.:∨","page":"Library","title":"AbstractLattices.:∨","text":"∨(ω::TensorAlgebra,η::TensorAlgebra)\n\nRegressive product as defined by the DeMorgan's law: ∨(ω...) = ⋆⁻¹(∧(⋆.(ω)...))\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.contraction","category":"page"},{"location":"library/#AbstractTensors.contraction","page":"Library","title":"AbstractTensors.contraction","text":"contraction(ω::TensorAlgebra,η::TensorAlgebra)\n\nInterior (right) contraction product: ω⋅η = ω∨⋆η\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.:⊙","category":"page"},{"location":"library/#AbstractTensors.:⊙","page":"Library","title":"AbstractTensors.:⊙","text":"⊙(ω::TensorAlgebra,η::TensorAlgebra)\n\nSymmetrization projection: ⊙(ω...) = ∑(∏(σ.(ω)...))/factorial(length(ω))\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.:⊠","category":"page"},{"location":"library/#AbstractTensors.:⊠","page":"Library","title":"AbstractTensors.:⊠","text":"⊠(ω::TensorAlgebra,η::TensorAlgebra)\n\nAnti-symmetrization projection: ⊠(ω...) = ∑(∏(πσ.(ω)...))/factorial(length(ω))\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.:⊘","category":"page"},{"location":"library/#Grassmann.:⊘","page":"Library","title":"Grassmann.:⊘","text":"⊘(ω::TensorAlgebra,η::TensorAlgebra)\n\nSandwich product: ω⊘η = (~ω)⊖η⊖ω\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.generate_algebra","category":"page"},{"location":"library/#","page":"Library","title":"Library","text":"etc, ...","category":"page"},{"location":"tutorials/algebra-of-space/#The-Algebra-of-Space-(G3)-1","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"","category":"section"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"This notebook is an adaptation from the clifford python documentation.","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Import Grassmann and instantiate a three dimensional geometric algebra","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> using Grassmann\n\njulia> basis\"3\"\n(⟨+++⟩, v, v₁, v₂, v₃, v₁₂, v₁₃, v₂₃, v₁₂₃)","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Given a three dimensional GA with the orthonormal basis v_icdot v_j = delta_ij, the basis consists of scalars, three vectors, three bivectors, and a trivector.","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"underbracevmboxscalarqquadunderbracev_1v_2v_3mboxvectorsqquadunderbracev_12v_23v_13mboxbivectorsqquadunderbracev_123mboxtrivector","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"The @basis macro declares the algebra and assigns the Basis elements to local variables. The Grassmann.Algebra can also be assigned to G3 as","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> G3 = Λ(3)\nGrassmann.Algebra{⟨+++⟩,8}(v, v₁, v₂, v₃, v₁₂, v₁₃, v₂₃, v₁₂₃)","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"You may wish to explicitly assign the blades to variables like so,","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"e1 = G3.v1\ne2 = G3.v2\n# etc ...","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Or, if you're lazy you can use the macro with different local names","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> @basis ℝ^3 E e\n(⟨+++⟩, v, v₁, v₂, v₃, v₁₂, v₁₃, v₂₃, v₁₂₃)\n\njulia> e3, e123\n(v₃, v₁₂₃)","category":"page"},{"location":"tutorials/algebra-of-space/#Basics-1","page":"The Algebra of Space (G3)","title":"Basics","text":"","category":"section"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"The basic products are available","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> v1*v2 # geometric product\nv₁₂\n\njulia> v1|v2 # inner product\n0v\n\njulia> v1 ∧ v2 # exterior product\nv₁₂\n\njulia> v1 ∧ v2 ∧ v3 # even more exterior products\nv₁₂₃","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Multivectors can be defined in terms of the basis blades. For example, you can construct a rotor as a sum of a scalar and a bivector, like so","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> θ = π/4\n0.7853981633974483\n\njulia> R = cos(θ) - sin(θ)*v23\n0.7071067811865476 - 0.7071067811865475v₂₃\n\njulia> R = ~exp(θ*v23)\n0.7071067811865476 - 0.7071067811865475v₂₃","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"You can also mix grades without any reason","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> A = 1 + 2v1 + 3v12 + 4v123\n1 + 2v₁ + 3v₁₂ + 4v₁₂₃","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"The reversion operator is accomplished with the tilde ~ in front of the MultiVector on which it acts","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> ~A\n1 + 2v₁ - 3v₁₂ - 4v₁₂₃","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Taking a projection into a specific grade of a MultiVector is usually written langle Arangle_n and can be done using the soft brackets, like so","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> A(0)\n1v\n\njulia> A(1)\n2v₁ + 0v₂ + 0v₃\n\njulia> A(2)\n3v₁₂ + 0v₁₃ + 0v₂₃","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Using the reversion and grade projection operators, we can define the magnitude of A as A^2 = langletilde A Arangle","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> ~A*A\n30 + 4v₁ + 12v₂ + 24v₃\n\njulia> scalar(ans)\n30v","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"This is done in the abs and abs2 operators","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> abs2(A)\n30 + 4v₁ + 12v₂ + 24v₃\n\njulia> scalar(ans)\n30v","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"The dual of a multivector A can be defined as tilde AI, where I is the pseudoscalar for the geometric algebra. In G3, the dual of a vector is a bivector:","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> a = 1v1 + 2v2 + 3v3\n1v₁ + 2v₂ + 3v₃\n\njulia> ⋆a\n3v₁₂ - 2v₁₃ + 1v₂₃","category":"page"},{"location":"tutorials/algebra-of-space/#Reflections-1","page":"The Algebra of Space (G3)","title":"Reflections","text":"","category":"section"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Reflecting a vector c about a normalized vector n is pretty simple, cmapsto -ncn","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> c = v1+v2+v3 # a vector\n1v₁ + 1v₂ + 1v₃\n\njulia> n = v1 # the reflector\nv₁\n\njulia> -n*c*n # reflect a in hyperplane normal to n\n0.0 - 1.0v₁ + 1.0v₂ + 1.0v₃","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Because we have the inv available, we can equally well reflect in un-normalized vectors using amapsto n^-1an","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> a = v1+v2+v3 # the vector\n1v₁ + 1v₂ + 1v₃\n\njulia> n = 3v1 # the reflector\n3v₁\n\njulia> inv(n)*a*n\n0.0 + 1.0v₁ - 1.0v₂ - 1.0v₃\n\njulia> n\\a*n\n0.0 + 1.0v₁ - 1.0v₂ - 1.0v₃","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Reflections can also be made with respect to the hyperplane normal to the vector, in which case the formula is negated.","category":"page"},{"location":"tutorials/algebra-of-space/#Rotations-1","page":"The Algebra of Space (G3)","title":"Rotations","text":"","category":"section"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"A vector can be rotated using the formula amapsto tilde R aR, where R is a rotor. A rotor can be defined by multiple reflections, R = mn or by a plane and an angle R = e^theta B2. For example,","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> R = exp(π/4*v12)\n0.7071067811865476 + 0.7071067811865475v₁₂\n\njulia> ~R*v1*R\n0.0 + 2.220446049250313e-16v₁ + 1.0v₂","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Maybe we want to define a function which can return rotor of some angle theta in the v_12-plane, R_12 = e^theta v_122","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"R12(θ) = exp(θ/2*v12)","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"And use it like this","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> R = R12(π/2)\n0.7071067811865476 + 0.7071067811865475v₁₂\n\njulia> a = v1+v2+v3\n1v₁ + 1v₂ + 1v₃\n\njulia> ~R*a*R\n0.0 - 0.9999999999999997v₁ + 1.0v₂ + 1.0v₃","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"You might as well make the angle argument a bivector, so that you can control the plane of rotation as well as the angle","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"R_B(B) = exp(B/2)","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Then you could do","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> Rxy = R_B(π/4*v12)\n0.9238795325112867 + 0.3826834323650898v₁₂\n\njulia> Ryz = R_B(π/5*v23)\n0.9510565162951535 + 0.3090169943749474v₂₃","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"or","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> R_B(π/6*(v23+v12))\n0.9322404424570728 + 0.25585909935689327v₁₂ + 0.25585909935689327v₂₃","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Maybe you want to define a function which returns a function that enacts a specified rotation, f(B) = amapsto e^B2ae^B2. This just saves you having to write out the sandwich product, which is nice if you are cascading a bunch of rotors, like so","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"R_factory(B) = (R = exp(B/2); a -> ~R*a*R)\nRxy = R_factory(π/3*v12)\nRyz = R_factory(π/3*v23)\nRxz = R_factory(π/3*v13)","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"Then you can do things like","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> R = R_factory(π/6*(v23+v12)) # this returns a function\n#7 (generic function with 1 method)\n\njulia> R(a) # which acts on a vector\n0.0 + 0.5229556000177233v₁ + 0.7381444851051178v₂ + 1.4770443999822769v₃ + 2.7755575615628914e-17v₁₂₃\n\njulia> Rxy(Ryz(Rxz(a)))\n0.0 + 0.40849364905389035v₁ - 0.6584936490538903v₂ + 1.5490381056766584v₃","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"To make cascading a sequence of rotations as concise as possible, we could define a function which takes a list of bivectors ABC, and enacts the sequence of rotations which they represent on some vector x.","category":"page"},{"location":"tutorials/algebra-of-space/#","page":"The Algebra of Space (G3)","title":"The Algebra of Space (G3)","text":"julia> R_seq(args...) = (R = prod(exp.(args./2)); a -> ~R*a*R)\nR_seq (generic function with 1 method)\n\njulia> R = R_seq(π/2*v23, π/2*v12, v1)\n#11 (generic function with 1 method)\n\njulia> R(v1)\n2.220446049250313e-16 + 3.469446951953614e-16v₁ + 0.9999999999999996v₂ - 1.3877787807814457e-17v₃ - 5.551115123125783e-17v₂₃ + 2.7755575615628914e-17v₁₂₃","category":"page"},{"location":"#Grassmann.jl-1","page":"Home","title":"Grassmann.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"⟨Leibniz-Grassmann-Clifford-Hestenes⟩ differential geometric algebra / multivector simplicial complex","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: YouTube) (Image: DropBox) (Image: DOI) (Image: Gitter) (Image: BiVector)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The Grassmann.jl package provides tools for doing computations based on multi-linear algebra, differential geometry, and spin groups using the extended tensor algebra known as Leibniz-Grassmann-Clifford-Hestenes geometric algebra. Combinatorial products include ∧, ∨, ⋅, *, ⋆, ', ~, d, ∂ (which are the exterior, regressive, inner, and geometric products; along with the Hodge star, adjoint, reversal, differential and boundary operators). Kernelized operations are built up from composite sparse tensor products and Hodge duality, with high dimensional support for up to 62 indices using staged caching and precompilation. Code generation enables concise yet highly extensible definitions. DirectSum.jl multivector parametric type polymorphism is based on tangent bundle vector spaces and conformal projective geometry to make the dispatch highly extensible for many applications. Additionally, universal interoperability between different sub-algebras is enabled by AbstractTensors.jl, on which the type system is built.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"index.md\",\"design.md\",\"algebra.md\",\"library.md\",\"references.md\"]","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This Grassmann package for the Julia language was created by github.com/chakravala for mathematics and computer algebra research with differential geometric algebras. These projects and repositories were started entirely independently and are available as free software to help spread the ideas to a wider audience. Please consider donating to show your thanks and appreciation to this project at liberapay, GitHub Sponsors, Patreon, Tidelift, Bandcamp or contribute (documentation, tests, examples) in the repositories.","category":"page"},{"location":"algebra/#Grassmann-elements-and-geometric-algebra-Λ(V)-1","page":"Algebra","title":"Grassmann elements and geometric algebra Λ(V)","text":"","category":"section"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"The Grassmann Basis elements vₖ and wᵏ are linearly independent vector and covector elements of V, while the Leibniz Operator elements ∂ₖ are partial tangent derivations and ϵᵏ are dependent functions of the tangent manifold. Higher grade elements correspond to SubManifold subspaces, while higher order function elements become homogenous polynomials and Taylor series.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Combining the linear basis generating elements with each other using the multilinear tensor product yields a graded (decomposable) tensor Basis ⟨w₁⊗⋯⊗wₖ⟩, where grade is determined by the number of anti-symmetric basis elements in its tensor product decomposition. The algebra is partitioned into both symmetric and anti-symmetric tensor equivalence classes. Higher-order composite tensor elements are oriented-multi-sets. Anti-symmetric indices have two orientations and higher multiplicities of them result in zero values, so the only interesting multiplicity is 1. The Leibniz-Taylor algebra is a quotient polynomial ring  so that ϵₖ^(μ+1) is zero.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"By virtue of Julia's multiple dispatch on the field type T, methods can specialize on the dimension N and grade G with a VectorBundle{N} via the TensorAlgebra{V} subtypes, such as Basis{V,G}, Simplex{V,G,B,T}, Chain{V,G,T}, SparseChain{V,G,T}, MultiVector{V,T}, and MultiGrade{V,G} types.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"For the oriented sets of the Grassmann exterior algebra, the parity of (-1)^P is factored into transposition compositions when interchanging ordering of the tensor product argument permutations. The symmetrical algebra does not need to track this parity, but has higher multiplicities in its indices. Symmetric differential function algebra of Leibniz trivializes the orientation into a single class of index multi-sets, while Grassmann's exterior algebra is partitioned into two oriented equivalence classes by anti-symmetry. Full tensor algebra can be sub-partitioned into equivalence classes in multiple ways based on the element symmetry, grade, and metric signature composite properties. Both symmetry classes can be characterized by the same geometric product.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Grassmann's exterior algebra doesn't invoke the properties of multi-sets, as it is related to the algebra of oriented sets; while the Leibniz symmetric algebra is that of unoriented multi-sets. Combined, the mixed-symmetry algebra yield a multi-linear propositional lattice. The formal sum of equal grade elements is an oriented Chain and with mixed grade it is a MultiVector simplicial complex. Thus, various standard operations on the oriented multi-sets are possible including ∪,∩,⊕ and the index operation ⊖, which is symmetric difference operation ⊻.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"The elements of the Algebra can be generated in many ways using the Basis elements created by the @basis macro,","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> using Grassmann; @basis ℝ'⊕ℝ^3 # equivalent to basis\"-+++\"\n(⟨-+++⟩, v, v₁, v₂, v₃, v₄, v₁₂, v₁₃, v₁₄, v₂₃, v₂₄, v₃₄, v₁₂₃, v₁₂₄, v₁₃₄, v₂₃₄, v₁₂₃₄)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"As a result of this macro, all of the Basis{V,G} elements generated by that VectorBundle become available in the local workspace with the specified naming. The first argument provides signature specifications, the second argument is the variable name for the VectorBundle, and the third and fourth argument are prefixes of the Basis vector names (and covector basis names). By default, V is assigned the VectorBundle and v is the prefix for the Basis elements.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> V # Minkowski spacetime\n⟨-+++⟩\n\njulia> typeof(V) # dispatch by vector space\nVectorBundle{4,0,0x0000000000000001}\n\njulia> typeof(v13) # extensive type info\nBasis{⟨-+++⟩,2,0x0000000000000005}\n\njulia> v13∧v2 # exterior tensor product\n-1v₁₂₃\n\njulia> ans^2 # applies geometric product\n1v\n\njulia> @btime 2v1+v3 # vector element\n  37.794 ns (3 allocations: 80 bytes)\n2v₁ + 0v₂ + 1v₃ + 0v₄\n\njulia> @btime $ans⋅$ans # inner product\n  15.266 ns (3 allocations: 48 bytes)\n-3v","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"It is entirely possible to assign multiple different bases with different signatures without any problems. In the following command, the @basis macro arguments are used to assign the vector space name to S instead of V and basis elements to b instead of v, so that their local names do not interfere:","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> @basis \"++++\" S b;\n\njulia> let k = (b1+b2)-b3\n           for j ∈ 1:9\n               k = k*(b234+b134)\n               println(k)\n       end end\n0 + 1v₁₄ + 1v₂₄ + 2v₃₄\n0 - 2v₁ - 2v₂ + 2v₃\n0 - 2v₁₄ - 2v₂₄ - 4v₃₄\n0 + 4v₁ + 4v₂ - 4v₃\n0 + 4v₁₄ + 4v₂₄ + 8v₃₄\n0 - 8v₁ - 8v₂ + 8v₃\n0 - 8v₁₄ - 8v₂₄ - 16v₃₄\n0 + 16v₁ + 16v₂ - 16v₃\n0 + 16v₁₄ + 16v₂₄ + 32v₃₄","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Alternatively, if you do not wish to assign these variables to your local workspace, the versatile Grassmann.Algebra{N} constructors can be used to contain them, which is exported to the user as the method Λ(V),","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> G3 = Λ(3) # equivalent to Λ(V\"+++\"), Λ(ℝ^3), Λ.V3\nGrassmann.Algebra{⟨+++⟩,8}(v, v₁, v₂, v₃, v₁₂, v₁₃, v₂₃, v₁₂₃)\n\njulia> G3.v13 * G3.v12\nv₂₃","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"The geometric algebraic product is the oriented symmetric difference operator ⊖ (weighted by the bilinear form g) and multi-set sum ⊕ applied to multilinear tensor products ⊗ in a single operation. Symmetry properties of the tensor algebra can be characterized in terms of the geometric product by two averaging operations, which are the symmetrization ⊙ and anti-symmetrization ⊠ operators. These products satisfy various MultiVector properties, including the associative and distributive laws.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"It is possible to assign the quaternion generators i,j,k with","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> i,j,k = hyperplanes(ℝ^3)\n3-element Array{Simplex{⟨+++⟩,2,B,Int64} where B,1}:\n -1v₂₃\n 1v₁₃\n -1v₁₂\n\njulia> @btime $i^2, $j^2, $k^2, $i*$j*$k\n  0.027 ns (0 allocations: 0 bytes)\n(-1v, -1v, -1v, -1v)\n\njulia> @btime -(j+k) * (j+k)\n  97.373 ns (4 allocations: 176 bytes)\n2.0v⃖\n\njulia> @btime -(j+k) * i\n  67.695 ns (3 allocations: 144 bytes)\n0.0 - 1.0v₁₂ - 1.0v₁₃","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Alternatively, another representation of the quaternions is","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> basis\"--\"\n(⟨--⟩, v, v₁, v₂, v₁₂)\n\njulia> v1^2, v2^2, v12^2, v1*v2*v12\n(-1v, -1v, -1v, -1v)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"With the preliminary implementations of the exp and log functions one can compute","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> exp(0.5π/2*(i+j)/sqrt(2))\n0.7071067811865476 + 0.5v₁₃ - 0.5v₂₃\n\njulia> ans == (sqrt(2)+j+i)/2\ntrue\n\njulia> log1p(i)\n0.34657359027997264 - 0.7853981633974485v₂₃\n\njulia> log(i)\n0.0 - 1.5708963467978978v₂₃","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"The parametric type formalism in Grassmann is highly expressive to enable the pre-allocation of geometric algebra computations for specific sparse-subalgebras, including the representation of rotational groups, Lie bivector algebras, and affine projective geometry.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"With LightGraphs,jl, GraphPlot.jl, Cairo.jl, Compose.jl it is possible to convert Grassmann numbers into graphs.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"using Grassmann, Compose # environment: LightGraphs, GraphPlot\nx = Grassmann.Algebra(ℝ^7).v123\nGrassmann.graph(x+!x)\ndraw(PDF(\"simplex.pdf\",16cm,16cm),x+!x)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(Image: paper/img/triangle-tetrahedron.png)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Due to GeometryTypes,jl Point interoperability, plotting and visualizing with Makie.jl is easily possible. For example, the vectorfield method creates an anonymous Point function that applies a versor outermorphism:","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"using Grassmann, Makie\nbasis\"2\" # Euclidean\nstreamplot(vectorfield(exp(π*v12/2)),-1.5..1.5,-1.5..1.5)\nstreamplot(vectorfield(exp((π/2)*v12/2)),-1.5..1.5,-1.5..1.5)\nstreamplot(vectorfield(exp((π/4)*v12/2)),-1.5..1.5,-1.5..1.5)\nstreamplot(vectorfield(v1*exp((π/4)*v12/2)),-1.5..1.5,-1.5..1.5)\n@basis S\"+-\" # Hyperbolic\nstreamplot(vectorfield(exp((π/8)*v12/2)),-1.5..1.5,-1.5..1.5)\nstreamplot(vectorfield(v1*exp((π/4)*v12/2)),-1.5..1.5,-1.5..1.5)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(Image: paper/img/plane-1.png) (Image: paper/img/plane-2.png) (Image: paper/img/plane-3.png) (Image: paper/img/plane-4.png) (Image: paper/img/plane-3.png) (Image: paper/img/plane-4.png)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"using Grassmann, Makie\n@basis S\"∞+++\"\nf(t) = (↓(exp(π*t*((3/7)*v12+v∞3))>>>↑(v1+v2+v3)))\nlines(points(f,V(2,3,4)))\n@basis S\"∞∅+++\"\nf(t) = (↓(exp(π*t*((3/7)*v12+v∞3))>>>↑(v1+v2+v3)))\nlines(points(f,V(3,4,5)))","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(Image: paper/img/torus.png) (Image: paper/img/helix.png)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"using Grassmann, Makie; @basis S\"∞+++\"\nstreamplot(vectorfield(exp((π/4)*(v12+v∞3)),V(2,3,4)),-1.5..1.5,-1.5..1.5,-1.5..1.5,gridsize=(10,10))","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(Image: paper/img/orb.png)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"using Grassmann, Makie; @basis S\"∞+++\"\nstreamplot(vectorfield(exp((π/4)*(v12+v∞3)),V(2,3,4),V(1,2,3)),-1.5..1.5,-1.5..1.5,-1.5..1.5,gridsize=(10,10))","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(Image: paper/img/wave.png)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"using Grassmann, Makie; @basis S\"∞+++\"\nf(t) = ↓(exp(t*v∞*(sin(3t)*3v1+cos(2t)*7v2-sin(5t)*4v3)/2)>>>↑(v1+v2-v3))\nlines(points(f,V(2,3,4)))","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(Image: paper/img/orb.png)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"using Grassmann, Makie; @basis S\"∞+++\"\nf(t) = ↓(exp(t*(v12+0.07v∞*(sin(3t)*3v1+cos(2t)*7v2-sin(5t)*4v3)/2))>>>↑(v1+v2-v3))\nlines(points(f,V(2,3,4)))","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"(Image: paper/img/orb.png)","category":"page"},{"location":"algebra/#Approaching-dimensions-with-SparseAlgebra-and-ExtendedAlgebra-1","page":"Algebra","title":"Approaching ∞ dimensions with SparseAlgebra and ExtendedAlgebra","text":"","category":"section"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"In order to work with a TensorAlgebra{V}, it is necessary for some computations to be cached. This is usually done automatically when accessed.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> Λ(7) + Λ(7)'\nGrassmann.SparseAlgebra{⟨+++++++-------⟩*,16384}(v, ..., v₁₂₃₄₅₆₇w¹²³⁴⁵⁶⁷)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"One way of declaring the cache for all 3 combinations of a VectorBundle{N} and its dual is to ask for the sum Λ(V) + Λ(V)', which is equivalent to Λ(V⊕V'), but this does not initialize the cache of all 3 combinations unlike the former.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Staging of precompilation and caching is designed so that a user can smoothly transition between very high dimensional and low dimensional algebras in a single session, with varying levels of extra caching and optimizations. The parametric type formalism in Grassmann is highly expressive and enables pre-allocation of geometric algebra computations involving specific sparse subalgebras, including the representation of rotational groups.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"It is possible to reach Simplex elements with up to N=62 vertices from a TensorAlgebra having higher maximum dimensions than supported by Julia natively.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> Λ(62)\nGrassmann.ExtendedAlgebra{⟨++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++⟩,4611686018427387904}(v, ..., v₁₂₃₄₅₆₇₈₉₀abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ)\n\njulia> Λ(62).v32a87Ng\n-1v₂₃₇₈agN","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"The 62 indices require full alpha-numeric labeling with lower-case and capital letters. This now allows you to reach up to 4,611,686,018,427,387,904 dimensions with Julia using Grassmann. Then the volume element is","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"v₁₂₃₄₅₆₇₈₉₀abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Full MultiVector allocations are only possible for N≤22, but sparse operations are also available at higher dimensions. While Grassmann.Algebra{V} is a container for the TensorAlgebra generators of V, the Grassmann.Algebra is only cached for N≤8. For the range of dimensions 8<N≤22$, the Grassmann.SparseAlgebra type is used.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> Λ(22)\nGrassmann.SparseAlgebra{⟨++++++++++++++++++++++⟩,4194304}(v, ..., v₁₂₃₄₅₆₇₈₉₀abcdefghijkl)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"This is the largest SparseAlgebra that can be generated with Julia, due to array size limitations.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"To reach higher dimensions with N>22, the Grassmann.ExtendedAlgebra type is used. It is suficient to work with a 64-bit representation (which is the default). And it turns out that with 62 standard keyboard characters, this fits nicely.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> V = ℝ^22\n⟨++++++++++++++++++++++⟩\n\njulia> Λ(V+V')\nGrassmann.ExtendedAlgebra{⟨++++++++++++++++++++++----------------------⟩*,17592186044416}(v, ..., v₁₂₃₄₅₆₇₈₉₀abcdefghijklw¹²³⁴⁵⁶⁷⁸⁹⁰ABCDEFGHIJKL)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"At 22 dimensions and lower there is better caching, with further extra caching for 8 dimensions or less. Thus, the largest Hilbert space that is fully reachable has 4,194,304 dimensions, but we can still reach out to 4,611,686,018,427,387,904 dimensions with the ExtendedAlgebra built in. It is still feasible to extend to a further super-extended 128-bit representation using the UInt128 type (but this will require further modifications of internals and helper functions. To reach into infinity even further, it is theoretically possible to construct ultra-extensions also using dictionaries. Full MultiVector elements are not representable when ExtendedAlgebra is used, but the performance of the Basis and sparse elements should be just as fast as for lower dimensions for the current SubAlgebra and TensorAlgebra types. The sparse representations are a work in progress to be improved with time.","category":"page"},{"location":"algebra/#Null-basis-of-the-projective-split-1","page":"Algebra","title":"Null-basis of the projective split","text":"","category":"section"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"In the following example, the null-basis from the projective split is used:","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> using Grassmann; @basis S\"∞∅++\"\n(⟨∞∅++⟩, v, v∞, v∅, v₁, v₂, v∞∅, v∞₁, v∞₂, v∅₁, v∅₂, v₁₂, v∞∅₁, v∞∅₂, v∞₁₂, v∅₁₂, v∞∅₁₂)\n\njulia> v∞^2, v∅^2, v1^2, v2^2\n(0v, 0v, v, v)\n\njulia> v∞ ⋅ v∅\n-1v\n\njulia> v∞∅^2\nv\n\njulia> v∞∅ * v∞, v∞∅ * v∅\n(-1v∞, v∅)\n\njulia> v∞ * v∅, v∅ * v∞\n(-1 + 1v∞∅, -1 - 1v∞∅)","category":"page"},{"location":"algebra/#Differential-forms-and-Leibniz-tangent-algebra-1","page":"Algebra","title":"Differential forms and Leibniz tangent algebra","text":"","category":"section"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Multiplication with an ϵᵢ element is used help signify tensor fields so that differential operators are automatically applied in the Basis algebra as ∂ⱼ⊖(ω⊗ϵᵢ) = ∂ⱼ(ωϵᵢ) ≠ (∂ⱼ⊗ω)⊖ϵᵢ.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> using Reduce, Grassmann; @mixedbasis tangent(ℝ^2,3,2);\n\njulia> (∂1+∂12) * (:(x1^2*x2^2)*ϵ1 + :(sin(x1))*ϵ2)\n0.0 + (2 * x1 * x2 ^ 2)∂₁ϵ¹ + (cos(x1))∂₁ϵ² + (4 * x1 * x2)∂₁₂ϵ¹","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"The product rule is encoded into Grassmann algebra when a tangent bundle is used, demonstrated here symbolically with Reduce by using the dual number definition:","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> using Grassmann, Reduce\nReduce (Free CSL version, revision 4590), 11-May-18 ...\n\njulia> @mixedbasis tangent(ℝ^1)\n(⟨+-₁¹⟩*, v, v₁, w¹, ϵ₁, ∂¹, v₁w¹, v₁ϵ₁, v₁∂¹, w¹ϵ₁, w¹∂¹, ϵ₁∂¹, v₁w¹ϵ₁, v₁w¹∂¹, v₁ϵ₁∂¹, w¹ϵ₁∂¹, v₁w¹ϵ₁∂¹)\n\njulia> a,b = :x*v1 + :dx*ϵ1, :y*v1 + :dy*ϵ1\n(xv₁ + dxϵ₁, yv₁ + dyϵ₁)\n\njulia> a * b\nx * y + (dy * x + dx * y)v₁ϵ₁","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Higher order and multivariable Taylor numbers are also supported.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> @basis tangent(ℝ,2,2) # 1D Grade, 2nd Order, 2 Variables\n(⟨+₁₂⟩, v, v₁, ∂₁, ∂₂, ∂₁v₁, ∂₂v₁, ∂₁₂, ∂₁₂v₁)\n\njulia> ∂1 * ∂1v1\n∂₁∂₁v₁\n\njulia> ∂1 * ∂2\n∂₁₂\n\njulia> v1*∂12\n∂₁₂v₁\n\njulia> ∂12*∂2 # 3rd order is zero\n0v\n\njulia> @mixedbasis tangent(ℝ^2,2,2); # 2D Grade, 2nd Order, 2 Variables\n\njulia> ∇ = ∂1v1 + ∂2v2 # vector field\n0v₁₂ + 1∂₁v₁ + 0∂₂v₁ + 0∂₁v₂ + 1∂₂v₂ + 0∂₁₂\n\njulia> ∇ ⋅ ∇ # Laplacian\n0.0v₁ + 0.0v₂ + 1∂₁∂₁ + 1∂₂∂₂\n\njulia> ans*∂1 # 3rd order is zero\n0.0v⃖","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Although fully generalized, the implementation in this release is still experimental.","category":"page"},{"location":"algebra/#Symbolic-coefficients-by-declaring-an-alternative-scalar-algebra-1","page":"Algebra","title":"Symbolic coefficients by declaring an alternative scalar algebra","text":"","category":"section"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Due to the abstract generality of the code generation of the Grassmann product algebra, it is easily possible to extend the entire set of operations to other kinds of scalar coefficient types.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> using GaloisFields, Grassmann\n\njulia> const F = GaloisField(7)\n𝔽₇\n\njulia> basis\"2\"\n(⟨++⟩, v, v₁, v₂, v₁₂)\n\njulia> @btime F(3)*v1\n  21.076 ns (2 allocations: 32 bytes)\n3v₁\n\njulia> @btime inv($ans)\n  14.965 ns (0 allocations: 0 bytes)\n5v₁","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"By default, the coefficients are required to be <:Number. However, if this does not suit your needs, alternative scalar product algebras can be specified with","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"Grassmann.generate_algebra(:AbstractAlgebra,:SetElem)","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"where :SetElem is the desired scalar field and :AbstractAlgebra is the scope which contains the scalar field.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"With the usage of Requires, symbolic scalar computation with Reduce.jl and other packages is automatically enabled,","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> using Reduce, Grassmann\nReduce (Free CSL version, revision 4590), 11-May-18 ...\n\njulia> basis\"2\"\n(⟨++⟩, v, v₁, v₂, v₁₂)\n\njulia> (:a*v1 + :b*v2) ⋅ (:c*v1 + :d*v2)\n(a * c + b * d)v\n\njulia> (:a*v1 + :b*v2) ∧ (:c*v1 + :d*v2)\n0.0 + (a * d - b * c)v₁₂\n\njulia> (:a*v1 + :b*v2) * (:c*v1 + :d*v2)\na * c + b * d + (a * d - b * c)v₁₂","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"If these compatibility steps are followed, then Grassmann will automatically declare the product algebra to use the Reduce.Algebra symbolic field operation scope.","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"julia> using Reduce,Grassmann; basis\"4\"\nReduce (Free CSL version, revision 4590), 11-May-18 ...\n(⟨++++⟩, v, v₁, v₂, v₃, v₄, v₁₂, v₁₃, v₁₄, v₂₃, v₂₄, v₃₄, v₁₂₃, v₁₂₄, v₁₃₄, v₂₃₄, v₁₂₃₄)\n\njulia> P,Q = :px*v1 + :py*v2 + :pz* v3 + v4, :qx*v1 + :qy*v2 + :qz*v3 + v4\n(pxv₁ + pyv₂ + pzv₃ + 1.0v₄, qxv₁ + qyv₂ + qzv₃ + 1.0v₄)\n\njulia> P∧Q\n0.0 + (px * qy - py * qx)v₁₂ + (px * qz - pz * qx)v₁₃ + (px - qx)v₁₄ + (py * qz - pz * qy)v₂₃ + (py - qy)v₂₄ + (pz - qz)v₃₄\n\njulia> R = :rx*v1 + :ry*v2 + :rz*v3 + v4\nrxv₁ + ryv₂ + rzv₃ + 1.0v₄\n\njulia> P∧Q∧R\n0.0 + ((px * qy - py * qx) * rz - ((px * qz - pz * qx) * ry - (py * qz - pz * qy) * rx))v₁₂₃ + (((px * qy - py * qx) + (py - qy) * rx) - (px - qx) * ry)v₁₂₄ + (((px * qz - pz * qx) + (pz - qz) * rx) - (px - qx) * rz)v₁₃₄ + (((py * qz - pz * qy) + (pz - qz) * ry) - (py - qy) * rz)v₂₃₄","category":"page"},{"location":"algebra/#","page":"Algebra","title":"Algebra","text":"It should be straight-forward to easily substitute any other extended algebraic operations and fields; issues with questions or pull-requests to that end are welcome.","category":"page"},{"location":"tutorials/quick-start/#Quick-start-(G2)-1","page":"Quick start (G2)","title":"Quick start (G2)","text":"","category":"section"},{"location":"tutorials/quick-start/#","page":"Quick start (G2)","title":"Quick start (G2)","text":"Import the Grassmann package and instantiate a two-dimensional algebra (G2),","category":"page"},{"location":"tutorials/quick-start/#","page":"Quick start (G2)","title":"Quick start (G2)","text":"julia> using Grassmann\n\njulia> @basis ℝ^2\n(⟨++⟩, v, v₁, v₂, v₁₂)\n\njulia> v1*v2 # geometric product\nv₁₂\n\njulia> v1|v2 # inner product\n0v\n\njulia> v1∧v2 # exterior product\nv₁₂","category":"page"},{"location":"tutorials/quick-start/#Reflection-1","page":"Quick start (G2)","title":"Reflection","text":"","category":"section"},{"location":"tutorials/quick-start/#","page":"Quick start (G2)","title":"Quick start (G2)","text":"julia> a = v1+v2\n1v₁ + 1v₂\n\njulia> n = v1\nv₁\n\njulia> -n*a/n # reflect a in hyperplane normal to n\n0.0 - 1.0v₁ + 1.0v₂","category":"page"},{"location":"tutorials/quick-start/#Rotation-1","page":"Quick start (G2)","title":"Rotation","text":"","category":"section"},{"location":"tutorials/quick-start/#","page":"Quick start (G2)","title":"Quick start (G2)","text":"julia> R = exp(π/4*v12)\n0.7071067811865476 + 0.7071067811865475v₁₂\n\njulia> R*v1*~R\n0.0 + 2.220446049250313e-16v₁ - 1.0v₂","category":"page"}]
}
