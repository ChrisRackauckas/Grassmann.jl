var documenterSearchIndex = {"docs":
[{"location":"tutorials/install/#Installation-1","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"Availability of this package and its subpackages can be automatically handled with the Julia package manager with using Pkg and Pkg.add(\"Grassmann\") or by entering:","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"pkg> add Grassmann","category":"page"},{"location":"tutorials/install/#Requirements-1","page":"Installation","title":"Requirements","text":"","category":"section"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"When the master branch is used it is possible that some of the dependencies also require a development branch before the release. This may include (but is not limited to) the following packages:","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"This requires a merged version of ComputedFieldTypes at https://github.com/vtjnash/ComputedFieldTypes.jl","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"Interoperability of TensorAlgebra with other packages is automatically enabled by DirectSum.jl and AbstractTensors.jl.","category":"page"},{"location":"tutorials/install/#","page":"Installation","title":"Installation","text":"The package is compatible via Requires.jl with  Reduce.jl, SymPy.jl, SymEngine.jl, AbstractAlgebra.jl, Nemo.jl, GaloisFields.jl, LightGraphs,jl, Compose.jl, GeometryTypes,jl, Makie.jl.","category":"page"},{"location":"library/#Grassmann.jl-Library-1","page":"Library","title":"Grassmann.jl Library","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Pages = [\"index.md\",\"library.md\"]","category":"page"},{"location":"library/#Index-1","page":"Library","title":"Index","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Pages = [\"library.md\"]","category":"page"},{"location":"library/#Grassmann-Interface-1","page":"Library","title":"Grassmann Interface","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.complementrighthodge","category":"page"},{"location":"library/#Grassmann.complementrighthodge","page":"Library","title":"Grassmann.complementrighthodge","text":"complementrighthodge(ω::TensorAlgebra)\n\nGrassmann-Poincare-Hodge complement: ⋆ω = ω∗I\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.complementlefthodge","category":"page"},{"location":"library/#Grassmann.complementlefthodge","page":"Library","title":"Grassmann.complementlefthodge","text":"complementlefthodge(ω::TensorAlgebra)\n\nGrassmann-Poincare left complement: ⋆'ω = I∗'ω\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.reverse","category":"page"},{"location":"library/#Base.reverse","page":"Library","title":"Base.reverse","text":"~(ω::TensorAlgebra)\n\nReverse of a MultiVector element: ~ω = (-1)^(grade(ω)(grade(ω)-1)/2)ω\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.involute","category":"page"},{"location":"library/#AbstractTensors.involute","page":"Library","title":"AbstractTensors.involute","text":"involute(ω::TensorAlgebra)\n\nInvolute of a MultiVector element: ~ω = (-1)^grade(ω)*ω\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.:∧","category":"page"},{"location":"library/#AbstractLattices.:∧","page":"Library","title":"AbstractLattices.:∧","text":"∧(ω::TensorAlgebra,η::TensorAlgebra)\n\nExterior product as defined by the anti-symmetric quotient Λ≡⊗/~\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"Grassmann.:∨","category":"page"},{"location":"library/#AbstractLattices.:∨","page":"Library","title":"AbstractLattices.:∨","text":"∨(ω::TensorAlgebra,η::TensorAlgebra)\n\nRegressive product as defined by the DeMorgan's law: ∨(ω...) = ⋆⁻¹(∧(⋆.(ω)...))\n\n\n\n\n\n","category":"function"},{"location":"library/#","page":"Library","title":"Library","text":"etc, ...","category":"page"},{"location":"#Grassmann.jl-1","page":"Home","title":"Grassmann.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"⟨Leibniz-Grassmann-Clifford-Hestenes⟩ differential geometric algebra / multivector simplicial complex","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: YouTube) (Image: DropBox) (Image: DOI) (Image: Gitter) (Image: BiVector)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The Grassmann.jl package provides tools for doing computations based on multi-linear algebra, differential geometry, and spin groups using the extended tensor algebra known as Leibniz-Grassmann-Clifford-Hestenes geometric algebra. Combinatorial products include ∧, ∨, ⋅, *, ⋆, ', ~, ∂ (which are the exterior, regressive, inner, and geometric products; along with the Hodge star, adjoint, reversal, and boundary operators). The kernelized operations are built up from composite sparse tensor products and Hodge duality, with high dimensional support for up to 62 indices using staged caching and precompilation. Code generation enables concise yet highly extensible definitions. The DirectSum.jl multivector parametric type polymorphism is based on tangent bundle vector spaces and conformal projective geometry to make the dispatch highly extensible for many applications. Additionally, the universal interoperability between different sub-algebras is enabled by AbstractTensors.jl, on which the type system is built.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"index.md\",\"library.md\"]","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This Grassmann package for the Julia language was created by github.com/chakravala for mathematics and computer algebra research with differential geometric algebras. These projects and repositories were started entirely independently and are available as free software to help spread the ideas to a wider audience. Please consider donating to show your thanks and appreciation to this project at liberapay, GitHub Sponsors, Patreon, Tidelift, Bandcamp or contribute (documentation, tests, examples) in the repositories.","category":"page"},{"location":"tutorials/quick-start/#Quick-start-1","page":"Quick start","title":"Quick start","text":"","category":"section"},{"location":"tutorials/quick-start/#","page":"Quick start","title":"Quick start","text":"Add some quick start tutorials here.","category":"page"}]
}
